'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8825
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DbTokoBukuDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DbTokoBukuDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableT_BARANG As T_BARANGDataTable
    
    Private tableT_KATEGORI As T_KATEGORIDataTable
    
    Private tableT_PEMBELIAN As T_PEMBELIANDataTable
    
    Private tableT_PEMBELIAN_DETAIL As T_PEMBELIAN_DETAILDataTable
    
    Private tableT_PENJUALAN As T_PENJUALANDataTable
    
    Private tableT_PENJUALAN_DETAIL As T_PENJUALAN_DETAILDataTable
    
    Private tableT_SUPPLIER As T_SUPPLIERDataTable
    
    Private relationFK_T_BARANG_T_KATEGORI As Global.System.Data.DataRelation
    
    Private relationFK_T_PEMBELIAN_T_SUPPLIER As Global.System.Data.DataRelation
    
    Private relationFK_T_PEMBELIAN_DETAIL_T_PEMBELIAN As Global.System.Data.DataRelation
    
    Private relationFK_T_PENJUALAN_DETAIL_T_BARANG As Global.System.Data.DataRelation
    
    Private relationFK_T_PENJUALAN_DETAIL_T_PENJUALAN As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("T_BARANG")) Is Nothing) Then
                MyBase.Tables.Add(New T_BARANGDataTable(ds.Tables("T_BARANG")))
            End If
            If (Not (ds.Tables("T_KATEGORI")) Is Nothing) Then
                MyBase.Tables.Add(New T_KATEGORIDataTable(ds.Tables("T_KATEGORI")))
            End If
            If (Not (ds.Tables("T_PEMBELIAN")) Is Nothing) Then
                MyBase.Tables.Add(New T_PEMBELIANDataTable(ds.Tables("T_PEMBELIAN")))
            End If
            If (Not (ds.Tables("T_PEMBELIAN_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New T_PEMBELIAN_DETAILDataTable(ds.Tables("T_PEMBELIAN_DETAIL")))
            End If
            If (Not (ds.Tables("T_PENJUALAN")) Is Nothing) Then
                MyBase.Tables.Add(New T_PENJUALANDataTable(ds.Tables("T_PENJUALAN")))
            End If
            If (Not (ds.Tables("T_PENJUALAN_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New T_PENJUALAN_DETAILDataTable(ds.Tables("T_PENJUALAN_DETAIL")))
            End If
            If (Not (ds.Tables("T_SUPPLIER")) Is Nothing) Then
                MyBase.Tables.Add(New T_SUPPLIERDataTable(ds.Tables("T_SUPPLIER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_BARANG() As T_BARANGDataTable
        Get
            Return Me.tableT_BARANG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_KATEGORI() As T_KATEGORIDataTable
        Get
            Return Me.tableT_KATEGORI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_PEMBELIAN() As T_PEMBELIANDataTable
        Get
            Return Me.tableT_PEMBELIAN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_PEMBELIAN_DETAIL() As T_PEMBELIAN_DETAILDataTable
        Get
            Return Me.tableT_PEMBELIAN_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_PENJUALAN() As T_PENJUALANDataTable
        Get
            Return Me.tableT_PENJUALAN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_PENJUALAN_DETAIL() As T_PENJUALAN_DETAILDataTable
        Get
            Return Me.tableT_PENJUALAN_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_SUPPLIER() As T_SUPPLIERDataTable
        Get
            Return Me.tableT_SUPPLIER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DbTokoBukuDataSet = CType(MyBase.Clone,DbTokoBukuDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("T_BARANG")) Is Nothing) Then
                MyBase.Tables.Add(New T_BARANGDataTable(ds.Tables("T_BARANG")))
            End If
            If (Not (ds.Tables("T_KATEGORI")) Is Nothing) Then
                MyBase.Tables.Add(New T_KATEGORIDataTable(ds.Tables("T_KATEGORI")))
            End If
            If (Not (ds.Tables("T_PEMBELIAN")) Is Nothing) Then
                MyBase.Tables.Add(New T_PEMBELIANDataTable(ds.Tables("T_PEMBELIAN")))
            End If
            If (Not (ds.Tables("T_PEMBELIAN_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New T_PEMBELIAN_DETAILDataTable(ds.Tables("T_PEMBELIAN_DETAIL")))
            End If
            If (Not (ds.Tables("T_PENJUALAN")) Is Nothing) Then
                MyBase.Tables.Add(New T_PENJUALANDataTable(ds.Tables("T_PENJUALAN")))
            End If
            If (Not (ds.Tables("T_PENJUALAN_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New T_PENJUALAN_DETAILDataTable(ds.Tables("T_PENJUALAN_DETAIL")))
            End If
            If (Not (ds.Tables("T_SUPPLIER")) Is Nothing) Then
                MyBase.Tables.Add(New T_SUPPLIERDataTable(ds.Tables("T_SUPPLIER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableT_BARANG = CType(MyBase.Tables("T_BARANG"),T_BARANGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_BARANG) Is Nothing) Then
                Me.tableT_BARANG.InitVars
            End If
        End If
        Me.tableT_KATEGORI = CType(MyBase.Tables("T_KATEGORI"),T_KATEGORIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_KATEGORI) Is Nothing) Then
                Me.tableT_KATEGORI.InitVars
            End If
        End If
        Me.tableT_PEMBELIAN = CType(MyBase.Tables("T_PEMBELIAN"),T_PEMBELIANDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_PEMBELIAN) Is Nothing) Then
                Me.tableT_PEMBELIAN.InitVars
            End If
        End If
        Me.tableT_PEMBELIAN_DETAIL = CType(MyBase.Tables("T_PEMBELIAN_DETAIL"),T_PEMBELIAN_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_PEMBELIAN_DETAIL) Is Nothing) Then
                Me.tableT_PEMBELIAN_DETAIL.InitVars
            End If
        End If
        Me.tableT_PENJUALAN = CType(MyBase.Tables("T_PENJUALAN"),T_PENJUALANDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_PENJUALAN) Is Nothing) Then
                Me.tableT_PENJUALAN.InitVars
            End If
        End If
        Me.tableT_PENJUALAN_DETAIL = CType(MyBase.Tables("T_PENJUALAN_DETAIL"),T_PENJUALAN_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_PENJUALAN_DETAIL) Is Nothing) Then
                Me.tableT_PENJUALAN_DETAIL.InitVars
            End If
        End If
        Me.tableT_SUPPLIER = CType(MyBase.Tables("T_SUPPLIER"),T_SUPPLIERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_SUPPLIER) Is Nothing) Then
                Me.tableT_SUPPLIER.InitVars
            End If
        End If
        Me.relationFK_T_BARANG_T_KATEGORI = Me.Relations("FK_T_BARANG_T_KATEGORI")
        Me.relationFK_T_PEMBELIAN_T_SUPPLIER = Me.Relations("FK_T_PEMBELIAN_T_SUPPLIER")
        Me.relationFK_T_PEMBELIAN_DETAIL_T_PEMBELIAN = Me.Relations("FK_T_PEMBELIAN_DETAIL_T_PEMBELIAN")
        Me.relationFK_T_PENJUALAN_DETAIL_T_BARANG = Me.Relations("FK_T_PENJUALAN_DETAIL_T_BARANG")
        Me.relationFK_T_PENJUALAN_DETAIL_T_PENJUALAN = Me.Relations("FK_T_PENJUALAN_DETAIL_T_PENJUALAN")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DbTokoBukuDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DbTokoBukuDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableT_BARANG = New T_BARANGDataTable
        MyBase.Tables.Add(Me.tableT_BARANG)
        Me.tableT_KATEGORI = New T_KATEGORIDataTable
        MyBase.Tables.Add(Me.tableT_KATEGORI)
        Me.tableT_PEMBELIAN = New T_PEMBELIANDataTable
        MyBase.Tables.Add(Me.tableT_PEMBELIAN)
        Me.tableT_PEMBELIAN_DETAIL = New T_PEMBELIAN_DETAILDataTable
        MyBase.Tables.Add(Me.tableT_PEMBELIAN_DETAIL)
        Me.tableT_PENJUALAN = New T_PENJUALANDataTable
        MyBase.Tables.Add(Me.tableT_PENJUALAN)
        Me.tableT_PENJUALAN_DETAIL = New T_PENJUALAN_DETAILDataTable
        MyBase.Tables.Add(Me.tableT_PENJUALAN_DETAIL)
        Me.tableT_SUPPLIER = New T_SUPPLIERDataTable
        MyBase.Tables.Add(Me.tableT_SUPPLIER)
        Me.relationFK_T_BARANG_T_KATEGORI = New Global.System.Data.DataRelation("FK_T_BARANG_T_KATEGORI", New Global.System.Data.DataColumn() {Me.tableT_KATEGORI.Kd_KatagoriColumn}, New Global.System.Data.DataColumn() {Me.tableT_BARANG.Kd_KatagoriColumn}, false)
        Me.Relations.Add(Me.relationFK_T_BARANG_T_KATEGORI)
        Me.relationFK_T_PEMBELIAN_T_SUPPLIER = New Global.System.Data.DataRelation("FK_T_PEMBELIAN_T_SUPPLIER", New Global.System.Data.DataColumn() {Me.tableT_SUPPLIER.Kd_SupplierColumn}, New Global.System.Data.DataColumn() {Me.tableT_PEMBELIAN.Kd_SuplierColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PEMBELIAN_T_SUPPLIER)
        Me.relationFK_T_PEMBELIAN_DETAIL_T_PEMBELIAN = New Global.System.Data.DataRelation("FK_T_PEMBELIAN_DETAIL_T_PEMBELIAN", New Global.System.Data.DataColumn() {Me.tableT_PEMBELIAN.Kd_PembelianColumn}, New Global.System.Data.DataColumn() {Me.tableT_PEMBELIAN_DETAIL.Kd_PembelianColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PEMBELIAN_DETAIL_T_PEMBELIAN)
        Me.relationFK_T_PENJUALAN_DETAIL_T_BARANG = New Global.System.Data.DataRelation("FK_T_PENJUALAN_DETAIL_T_BARANG", New Global.System.Data.DataColumn() {Me.tableT_BARANG.Kd_BarangColumn}, New Global.System.Data.DataColumn() {Me.tableT_PENJUALAN_DETAIL.Kd_BarangColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PENJUALAN_DETAIL_T_BARANG)
        Me.relationFK_T_PENJUALAN_DETAIL_T_PENJUALAN = New Global.System.Data.DataRelation("FK_T_PENJUALAN_DETAIL_T_PENJUALAN", New Global.System.Data.DataColumn() {Me.tableT_PENJUALAN.Kd_PenjualanColumn}, New Global.System.Data.DataColumn() {Me.tableT_PENJUALAN_DETAIL.Kd_PenjualanColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PENJUALAN_DETAIL_T_PENJUALAN)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_BARANG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_KATEGORI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_PEMBELIAN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_PEMBELIAN_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_PENJUALAN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_PENJUALAN_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_SUPPLIER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DbTokoBukuDataSet = New DbTokoBukuDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub T_BARANGRowChangeEventHandler(ByVal sender As Object, ByVal e As T_BARANGRowChangeEvent)
    
    Public Delegate Sub T_KATEGORIRowChangeEventHandler(ByVal sender As Object, ByVal e As T_KATEGORIRowChangeEvent)
    
    Public Delegate Sub T_PEMBELIANRowChangeEventHandler(ByVal sender As Object, ByVal e As T_PEMBELIANRowChangeEvent)
    
    Public Delegate Sub T_PEMBELIAN_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As T_PEMBELIAN_DETAILRowChangeEvent)
    
    Public Delegate Sub T_PENJUALANRowChangeEventHandler(ByVal sender As Object, ByVal e As T_PENJUALANRowChangeEvent)
    
    Public Delegate Sub T_PENJUALAN_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As T_PENJUALAN_DETAILRowChangeEvent)
    
    Public Delegate Sub T_SUPPLIERRowChangeEventHandler(ByVal sender As Object, ByVal e As T_SUPPLIERRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_BARANGDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_BARANGRow)
        
        Private columnKd_Barang As Global.System.Data.DataColumn
        
        Private columnNm_Barang As Global.System.Data.DataColumn
        
        Private columnKd_Katagori As Global.System.Data.DataColumn
        
        Private columnStock As Global.System.Data.DataColumn
        
        Private columnHrg_Pokok As Global.System.Data.DataColumn
        
        Private columnHrg_Jual As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_BARANG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_BarangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Barang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nm_BarangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNm_Barang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_KatagoriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Katagori
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Hrg_PokokColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHrg_Pokok
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Hrg_JualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHrg_Jual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_BARANGRow
            Get
                Return CType(Me.Rows(index),T_BARANGRow)
            End Get
        End Property
        
        Public Event T_BARANGRowChanging As T_BARANGRowChangeEventHandler
        
        Public Event T_BARANGRowChanged As T_BARANGRowChangeEventHandler
        
        Public Event T_BARANGRowDeleting As T_BARANGRowChangeEventHandler
        
        Public Event T_BARANGRowDeleted As T_BARANGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_BARANGRow(ByVal row As T_BARANGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_BARANGRow(ByVal Kd_Barang As String, ByVal Nm_Barang As String, ByVal parentT_KATEGORIRowByFK_T_BARANG_T_KATEGORI As T_KATEGORIRow, ByVal Stock As Integer, ByVal Hrg_Pokok As Decimal, ByVal Hrg_Jual As Decimal) As T_BARANGRow
            Dim rowT_BARANGRow As T_BARANGRow = CType(Me.NewRow,T_BARANGRow)
            Dim columnValuesArray() As Object = New Object() {Kd_Barang, Nm_Barang, Nothing, Stock, Hrg_Pokok, Hrg_Jual}
            If (Not (parentT_KATEGORIRowByFK_T_BARANG_T_KATEGORI) Is Nothing) Then
                columnValuesArray(2) = parentT_KATEGORIRowByFK_T_BARANG_T_KATEGORI(0)
            End If
            rowT_BARANGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_BARANGRow)
            Return rowT_BARANGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByKd_Barang(ByVal Kd_Barang As String) As T_BARANGRow
            Return CType(Me.Rows.Find(New Object() {Kd_Barang}),T_BARANGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_BARANGDataTable = CType(MyBase.Clone,T_BARANGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_BARANGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKd_Barang = MyBase.Columns("Kd_Barang")
            Me.columnNm_Barang = MyBase.Columns("Nm_Barang")
            Me.columnKd_Katagori = MyBase.Columns("Kd_Katagori")
            Me.columnStock = MyBase.Columns("Stock")
            Me.columnHrg_Pokok = MyBase.Columns("Hrg_Pokok")
            Me.columnHrg_Jual = MyBase.Columns("Hrg_Jual")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKd_Barang = New Global.System.Data.DataColumn("Kd_Barang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Barang)
            Me.columnNm_Barang = New Global.System.Data.DataColumn("Nm_Barang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNm_Barang)
            Me.columnKd_Katagori = New Global.System.Data.DataColumn("Kd_Katagori", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Katagori)
            Me.columnStock = New Global.System.Data.DataColumn("Stock", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStock)
            Me.columnHrg_Pokok = New Global.System.Data.DataColumn("Hrg_Pokok", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHrg_Pokok)
            Me.columnHrg_Jual = New Global.System.Data.DataColumn("Hrg_Jual", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHrg_Jual)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnKd_Barang}, true))
            Me.columnKd_Barang.AllowDBNull = false
            Me.columnKd_Barang.Unique = true
            Me.columnKd_Barang.MaxLength = 7
            Me.columnNm_Barang.MaxLength = 50
            Me.columnKd_Katagori.MaxLength = 7
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_BARANGRow() As T_BARANGRow
            Return CType(Me.NewRow,T_BARANGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_BARANGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_BARANGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_BARANGRowChangedEvent) Is Nothing) Then
                RaiseEvent T_BARANGRowChanged(Me, New T_BARANGRowChangeEvent(CType(e.Row,T_BARANGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_BARANGRowChangingEvent) Is Nothing) Then
                RaiseEvent T_BARANGRowChanging(Me, New T_BARANGRowChangeEvent(CType(e.Row,T_BARANGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_BARANGRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_BARANGRowDeleted(Me, New T_BARANGRowChangeEvent(CType(e.Row,T_BARANGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_BARANGRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_BARANGRowDeleting(Me, New T_BARANGRowChangeEvent(CType(e.Row,T_BARANGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_BARANGRow(ByVal row As T_BARANGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DbTokoBukuDataSet = New DbTokoBukuDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_BARANGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_KATEGORIDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_KATEGORIRow)
        
        Private columnKd_Katagori As Global.System.Data.DataColumn
        
        Private columnNm_Katagori As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_KATEGORI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_KatagoriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Katagori
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nm_KatagoriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNm_Katagori
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_KATEGORIRow
            Get
                Return CType(Me.Rows(index),T_KATEGORIRow)
            End Get
        End Property
        
        Public Event T_KATEGORIRowChanging As T_KATEGORIRowChangeEventHandler
        
        Public Event T_KATEGORIRowChanged As T_KATEGORIRowChangeEventHandler
        
        Public Event T_KATEGORIRowDeleting As T_KATEGORIRowChangeEventHandler
        
        Public Event T_KATEGORIRowDeleted As T_KATEGORIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_KATEGORIRow(ByVal row As T_KATEGORIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_KATEGORIRow(ByVal Kd_Katagori As String, ByVal Nm_Katagori As String) As T_KATEGORIRow
            Dim rowT_KATEGORIRow As T_KATEGORIRow = CType(Me.NewRow,T_KATEGORIRow)
            Dim columnValuesArray() As Object = New Object() {Kd_Katagori, Nm_Katagori}
            rowT_KATEGORIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_KATEGORIRow)
            Return rowT_KATEGORIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByKd_Katagori(ByVal Kd_Katagori As String) As T_KATEGORIRow
            Return CType(Me.Rows.Find(New Object() {Kd_Katagori}),T_KATEGORIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_KATEGORIDataTable = CType(MyBase.Clone,T_KATEGORIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_KATEGORIDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKd_Katagori = MyBase.Columns("Kd_Katagori")
            Me.columnNm_Katagori = MyBase.Columns("Nm_Katagori")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKd_Katagori = New Global.System.Data.DataColumn("Kd_Katagori", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Katagori)
            Me.columnNm_Katagori = New Global.System.Data.DataColumn("Nm_Katagori", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNm_Katagori)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnKd_Katagori}, true))
            Me.columnKd_Katagori.AllowDBNull = false
            Me.columnKd_Katagori.Unique = true
            Me.columnKd_Katagori.MaxLength = 7
            Me.columnNm_Katagori.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_KATEGORIRow() As T_KATEGORIRow
            Return CType(Me.NewRow,T_KATEGORIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_KATEGORIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_KATEGORIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_KATEGORIRowChangedEvent) Is Nothing) Then
                RaiseEvent T_KATEGORIRowChanged(Me, New T_KATEGORIRowChangeEvent(CType(e.Row,T_KATEGORIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_KATEGORIRowChangingEvent) Is Nothing) Then
                RaiseEvent T_KATEGORIRowChanging(Me, New T_KATEGORIRowChangeEvent(CType(e.Row,T_KATEGORIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_KATEGORIRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_KATEGORIRowDeleted(Me, New T_KATEGORIRowChangeEvent(CType(e.Row,T_KATEGORIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_KATEGORIRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_KATEGORIRowDeleting(Me, New T_KATEGORIRowChangeEvent(CType(e.Row,T_KATEGORIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_KATEGORIRow(ByVal row As T_KATEGORIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DbTokoBukuDataSet = New DbTokoBukuDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_KATEGORIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_PEMBELIANDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_PEMBELIANRow)
        
        Private columnKd_Pembelian As Global.System.Data.DataColumn
        
        Private columnTgl_Pembelian As Global.System.Data.DataColumn
        
        Private columnKd_Suplier As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnPotongan As Global.System.Data.DataColumn
        
        Private columnGrand_Total As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_PEMBELIAN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_PembelianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Pembelian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tgl_PembelianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTgl_Pembelian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_SuplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Suplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PotonganColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPotongan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grand_TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrand_Total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_PEMBELIANRow
            Get
                Return CType(Me.Rows(index),T_PEMBELIANRow)
            End Get
        End Property
        
        Public Event T_PEMBELIANRowChanging As T_PEMBELIANRowChangeEventHandler
        
        Public Event T_PEMBELIANRowChanged As T_PEMBELIANRowChangeEventHandler
        
        Public Event T_PEMBELIANRowDeleting As T_PEMBELIANRowChangeEventHandler
        
        Public Event T_PEMBELIANRowDeleted As T_PEMBELIANRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_PEMBELIANRow(ByVal row As T_PEMBELIANRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_PEMBELIANRow(ByVal Kd_Pembelian As String, ByVal Tgl_Pembelian As String, ByVal parentT_SUPPLIERRowByFK_T_PEMBELIAN_T_SUPPLIER As T_SUPPLIERRow, ByVal Total As Decimal, ByVal Potongan As Decimal, ByVal Grand_Total As Decimal) As T_PEMBELIANRow
            Dim rowT_PEMBELIANRow As T_PEMBELIANRow = CType(Me.NewRow,T_PEMBELIANRow)
            Dim columnValuesArray() As Object = New Object() {Kd_Pembelian, Tgl_Pembelian, Nothing, Total, Potongan, Grand_Total}
            If (Not (parentT_SUPPLIERRowByFK_T_PEMBELIAN_T_SUPPLIER) Is Nothing) Then
                columnValuesArray(2) = parentT_SUPPLIERRowByFK_T_PEMBELIAN_T_SUPPLIER(0)
            End If
            rowT_PEMBELIANRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_PEMBELIANRow)
            Return rowT_PEMBELIANRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByKd_Pembelian(ByVal Kd_Pembelian As String) As T_PEMBELIANRow
            Return CType(Me.Rows.Find(New Object() {Kd_Pembelian}),T_PEMBELIANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_PEMBELIANDataTable = CType(MyBase.Clone,T_PEMBELIANDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_PEMBELIANDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKd_Pembelian = MyBase.Columns("Kd_Pembelian")
            Me.columnTgl_Pembelian = MyBase.Columns("Tgl_Pembelian")
            Me.columnKd_Suplier = MyBase.Columns("Kd_Suplier")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnPotongan = MyBase.Columns("Potongan")
            Me.columnGrand_Total = MyBase.Columns("Grand_Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKd_Pembelian = New Global.System.Data.DataColumn("Kd_Pembelian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Pembelian)
            Me.columnTgl_Pembelian = New Global.System.Data.DataColumn("Tgl_Pembelian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTgl_Pembelian)
            Me.columnKd_Suplier = New Global.System.Data.DataColumn("Kd_Suplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Suplier)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnPotongan = New Global.System.Data.DataColumn("Potongan", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPotongan)
            Me.columnGrand_Total = New Global.System.Data.DataColumn("Grand_Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrand_Total)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnKd_Pembelian}, true))
            Me.columnKd_Pembelian.AllowDBNull = false
            Me.columnKd_Pembelian.Unique = true
            Me.columnKd_Pembelian.MaxLength = 7
            Me.columnTgl_Pembelian.MaxLength = 20
            Me.columnKd_Suplier.MaxLength = 7
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_PEMBELIANRow() As T_PEMBELIANRow
            Return CType(Me.NewRow,T_PEMBELIANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_PEMBELIANRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_PEMBELIANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_PEMBELIANRowChangedEvent) Is Nothing) Then
                RaiseEvent T_PEMBELIANRowChanged(Me, New T_PEMBELIANRowChangeEvent(CType(e.Row,T_PEMBELIANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_PEMBELIANRowChangingEvent) Is Nothing) Then
                RaiseEvent T_PEMBELIANRowChanging(Me, New T_PEMBELIANRowChangeEvent(CType(e.Row,T_PEMBELIANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_PEMBELIANRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_PEMBELIANRowDeleted(Me, New T_PEMBELIANRowChangeEvent(CType(e.Row,T_PEMBELIANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_PEMBELIANRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_PEMBELIANRowDeleting(Me, New T_PEMBELIANRowChangeEvent(CType(e.Row,T_PEMBELIANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_PEMBELIANRow(ByVal row As T_PEMBELIANRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DbTokoBukuDataSet = New DbTokoBukuDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_PEMBELIANDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_PEMBELIAN_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_PEMBELIAN_DETAILRow)
        
        Private columnKd_Pembelian As Global.System.Data.DataColumn
        
        Private columnKd_Barang As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnHarga_Beli As Global.System.Data.DataColumn
        
        Private columnSub_Total As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_PEMBELIAN_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_PembelianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Pembelian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_BarangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Barang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Harga_BeliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHarga_Beli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sub_TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSub_Total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_PEMBELIAN_DETAILRow
            Get
                Return CType(Me.Rows(index),T_PEMBELIAN_DETAILRow)
            End Get
        End Property
        
        Public Event T_PEMBELIAN_DETAILRowChanging As T_PEMBELIAN_DETAILRowChangeEventHandler
        
        Public Event T_PEMBELIAN_DETAILRowChanged As T_PEMBELIAN_DETAILRowChangeEventHandler
        
        Public Event T_PEMBELIAN_DETAILRowDeleting As T_PEMBELIAN_DETAILRowChangeEventHandler
        
        Public Event T_PEMBELIAN_DETAILRowDeleted As T_PEMBELIAN_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_PEMBELIAN_DETAILRow(ByVal row As T_PEMBELIAN_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_PEMBELIAN_DETAILRow(ByVal parentT_PEMBELIANRowByFK_T_PEMBELIAN_DETAIL_T_PEMBELIAN As T_PEMBELIANRow, ByVal Kd_Barang As String, ByVal Qty As Integer, ByVal Harga_Beli As Decimal, ByVal Sub_Total As Decimal) As T_PEMBELIAN_DETAILRow
            Dim rowT_PEMBELIAN_DETAILRow As T_PEMBELIAN_DETAILRow = CType(Me.NewRow,T_PEMBELIAN_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Kd_Barang, Qty, Harga_Beli, Sub_Total}
            If (Not (parentT_PEMBELIANRowByFK_T_PEMBELIAN_DETAIL_T_PEMBELIAN) Is Nothing) Then
                columnValuesArray(0) = parentT_PEMBELIANRowByFK_T_PEMBELIAN_DETAIL_T_PEMBELIAN(0)
            End If
            rowT_PEMBELIAN_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_PEMBELIAN_DETAILRow)
            Return rowT_PEMBELIAN_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_PEMBELIAN_DETAILDataTable = CType(MyBase.Clone,T_PEMBELIAN_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_PEMBELIAN_DETAILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKd_Pembelian = MyBase.Columns("Kd_Pembelian")
            Me.columnKd_Barang = MyBase.Columns("Kd_Barang")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnHarga_Beli = MyBase.Columns("Harga_Beli")
            Me.columnSub_Total = MyBase.Columns("Sub_Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKd_Pembelian = New Global.System.Data.DataColumn("Kd_Pembelian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Pembelian)
            Me.columnKd_Barang = New Global.System.Data.DataColumn("Kd_Barang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Barang)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnHarga_Beli = New Global.System.Data.DataColumn("Harga_Beli", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHarga_Beli)
            Me.columnSub_Total = New Global.System.Data.DataColumn("Sub_Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSub_Total)
            Me.columnKd_Pembelian.MaxLength = 7
            Me.columnKd_Barang.MaxLength = 7
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_PEMBELIAN_DETAILRow() As T_PEMBELIAN_DETAILRow
            Return CType(Me.NewRow,T_PEMBELIAN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_PEMBELIAN_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_PEMBELIAN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_PEMBELIAN_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent T_PEMBELIAN_DETAILRowChanged(Me, New T_PEMBELIAN_DETAILRowChangeEvent(CType(e.Row,T_PEMBELIAN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_PEMBELIAN_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent T_PEMBELIAN_DETAILRowChanging(Me, New T_PEMBELIAN_DETAILRowChangeEvent(CType(e.Row,T_PEMBELIAN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_PEMBELIAN_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_PEMBELIAN_DETAILRowDeleted(Me, New T_PEMBELIAN_DETAILRowChangeEvent(CType(e.Row,T_PEMBELIAN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_PEMBELIAN_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_PEMBELIAN_DETAILRowDeleting(Me, New T_PEMBELIAN_DETAILRowChangeEvent(CType(e.Row,T_PEMBELIAN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_PEMBELIAN_DETAILRow(ByVal row As T_PEMBELIAN_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DbTokoBukuDataSet = New DbTokoBukuDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_PEMBELIAN_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_PENJUALANDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_PENJUALANRow)
        
        Private columnKd_Penjualan As Global.System.Data.DataColumn
        
        Private columnTgl_Penjualan As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnBayar As Global.System.Data.DataColumn
        
        Private columnGrand_Total As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_PENJUALAN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_PenjualanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Penjualan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tgl_PenjualanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTgl_Penjualan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BayarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBayar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grand_TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrand_Total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_PENJUALANRow
            Get
                Return CType(Me.Rows(index),T_PENJUALANRow)
            End Get
        End Property
        
        Public Event T_PENJUALANRowChanging As T_PENJUALANRowChangeEventHandler
        
        Public Event T_PENJUALANRowChanged As T_PENJUALANRowChangeEventHandler
        
        Public Event T_PENJUALANRowDeleting As T_PENJUALANRowChangeEventHandler
        
        Public Event T_PENJUALANRowDeleted As T_PENJUALANRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_PENJUALANRow(ByVal row As T_PENJUALANRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_PENJUALANRow(ByVal Kd_Penjualan As String, ByVal Tgl_Penjualan As String, ByVal Total As Decimal, ByVal Bayar As Decimal, ByVal Grand_Total As Decimal) As T_PENJUALANRow
            Dim rowT_PENJUALANRow As T_PENJUALANRow = CType(Me.NewRow,T_PENJUALANRow)
            Dim columnValuesArray() As Object = New Object() {Kd_Penjualan, Tgl_Penjualan, Total, Bayar, Grand_Total}
            rowT_PENJUALANRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_PENJUALANRow)
            Return rowT_PENJUALANRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByKd_Penjualan(ByVal Kd_Penjualan As String) As T_PENJUALANRow
            Return CType(Me.Rows.Find(New Object() {Kd_Penjualan}),T_PENJUALANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_PENJUALANDataTable = CType(MyBase.Clone,T_PENJUALANDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_PENJUALANDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKd_Penjualan = MyBase.Columns("Kd_Penjualan")
            Me.columnTgl_Penjualan = MyBase.Columns("Tgl_Penjualan")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnBayar = MyBase.Columns("Bayar")
            Me.columnGrand_Total = MyBase.Columns("Grand_Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKd_Penjualan = New Global.System.Data.DataColumn("Kd_Penjualan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Penjualan)
            Me.columnTgl_Penjualan = New Global.System.Data.DataColumn("Tgl_Penjualan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTgl_Penjualan)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnBayar = New Global.System.Data.DataColumn("Bayar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBayar)
            Me.columnGrand_Total = New Global.System.Data.DataColumn("Grand_Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrand_Total)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnKd_Penjualan}, true))
            Me.columnKd_Penjualan.AllowDBNull = false
            Me.columnKd_Penjualan.Unique = true
            Me.columnKd_Penjualan.MaxLength = 7
            Me.columnTgl_Penjualan.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_PENJUALANRow() As T_PENJUALANRow
            Return CType(Me.NewRow,T_PENJUALANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_PENJUALANRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_PENJUALANRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_PENJUALANRowChangedEvent) Is Nothing) Then
                RaiseEvent T_PENJUALANRowChanged(Me, New T_PENJUALANRowChangeEvent(CType(e.Row,T_PENJUALANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_PENJUALANRowChangingEvent) Is Nothing) Then
                RaiseEvent T_PENJUALANRowChanging(Me, New T_PENJUALANRowChangeEvent(CType(e.Row,T_PENJUALANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_PENJUALANRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_PENJUALANRowDeleted(Me, New T_PENJUALANRowChangeEvent(CType(e.Row,T_PENJUALANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_PENJUALANRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_PENJUALANRowDeleting(Me, New T_PENJUALANRowChangeEvent(CType(e.Row,T_PENJUALANRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_PENJUALANRow(ByVal row As T_PENJUALANRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DbTokoBukuDataSet = New DbTokoBukuDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_PENJUALANDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_PENJUALAN_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_PENJUALAN_DETAILRow)
        
        Private columnKd_Penjualan As Global.System.Data.DataColumn
        
        Private columnKd_Barang As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnHarga_Beli As Global.System.Data.DataColumn
        
        Private columnSub_Total As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_PENJUALAN_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_PenjualanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Penjualan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_BarangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Barang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Harga_BeliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHarga_Beli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sub_TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSub_Total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_PENJUALAN_DETAILRow
            Get
                Return CType(Me.Rows(index),T_PENJUALAN_DETAILRow)
            End Get
        End Property
        
        Public Event T_PENJUALAN_DETAILRowChanging As T_PENJUALAN_DETAILRowChangeEventHandler
        
        Public Event T_PENJUALAN_DETAILRowChanged As T_PENJUALAN_DETAILRowChangeEventHandler
        
        Public Event T_PENJUALAN_DETAILRowDeleting As T_PENJUALAN_DETAILRowChangeEventHandler
        
        Public Event T_PENJUALAN_DETAILRowDeleted As T_PENJUALAN_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_PENJUALAN_DETAILRow(ByVal row As T_PENJUALAN_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_PENJUALAN_DETAILRow(ByVal parentT_PENJUALANRowByFK_T_PENJUALAN_DETAIL_T_PENJUALAN As T_PENJUALANRow, ByVal parentT_BARANGRowByFK_T_PENJUALAN_DETAIL_T_BARANG As T_BARANGRow, ByVal Qty As Integer, ByVal Harga_Beli As Decimal, ByVal Sub_Total As Decimal) As T_PENJUALAN_DETAILRow
            Dim rowT_PENJUALAN_DETAILRow As T_PENJUALAN_DETAILRow = CType(Me.NewRow,T_PENJUALAN_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Qty, Harga_Beli, Sub_Total}
            If (Not (parentT_PENJUALANRowByFK_T_PENJUALAN_DETAIL_T_PENJUALAN) Is Nothing) Then
                columnValuesArray(0) = parentT_PENJUALANRowByFK_T_PENJUALAN_DETAIL_T_PENJUALAN(0)
            End If
            If (Not (parentT_BARANGRowByFK_T_PENJUALAN_DETAIL_T_BARANG) Is Nothing) Then
                columnValuesArray(1) = parentT_BARANGRowByFK_T_PENJUALAN_DETAIL_T_BARANG(0)
            End If
            rowT_PENJUALAN_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_PENJUALAN_DETAILRow)
            Return rowT_PENJUALAN_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_PENJUALAN_DETAILDataTable = CType(MyBase.Clone,T_PENJUALAN_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_PENJUALAN_DETAILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKd_Penjualan = MyBase.Columns("Kd_Penjualan")
            Me.columnKd_Barang = MyBase.Columns("Kd_Barang")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnHarga_Beli = MyBase.Columns("Harga_Beli")
            Me.columnSub_Total = MyBase.Columns("Sub_Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKd_Penjualan = New Global.System.Data.DataColumn("Kd_Penjualan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Penjualan)
            Me.columnKd_Barang = New Global.System.Data.DataColumn("Kd_Barang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Barang)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnHarga_Beli = New Global.System.Data.DataColumn("Harga_Beli", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHarga_Beli)
            Me.columnSub_Total = New Global.System.Data.DataColumn("Sub_Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSub_Total)
            Me.columnKd_Penjualan.MaxLength = 7
            Me.columnKd_Barang.MaxLength = 7
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_PENJUALAN_DETAILRow() As T_PENJUALAN_DETAILRow
            Return CType(Me.NewRow,T_PENJUALAN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_PENJUALAN_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_PENJUALAN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_PENJUALAN_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent T_PENJUALAN_DETAILRowChanged(Me, New T_PENJUALAN_DETAILRowChangeEvent(CType(e.Row,T_PENJUALAN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_PENJUALAN_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent T_PENJUALAN_DETAILRowChanging(Me, New T_PENJUALAN_DETAILRowChangeEvent(CType(e.Row,T_PENJUALAN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_PENJUALAN_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_PENJUALAN_DETAILRowDeleted(Me, New T_PENJUALAN_DETAILRowChangeEvent(CType(e.Row,T_PENJUALAN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_PENJUALAN_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_PENJUALAN_DETAILRowDeleting(Me, New T_PENJUALAN_DETAILRowChangeEvent(CType(e.Row,T_PENJUALAN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_PENJUALAN_DETAILRow(ByVal row As T_PENJUALAN_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DbTokoBukuDataSet = New DbTokoBukuDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_PENJUALAN_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_SUPPLIERDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_SUPPLIERRow)
        
        Private columnKd_Supplier As Global.System.Data.DataColumn
        
        Private columnNm_Supplier As Global.System.Data.DataColumn
        
        Private columnAlamat As Global.System.Data.DataColumn
        
        Private columnTelp As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_SUPPLIER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kd_SupplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKd_Supplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nm_SupplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNm_Supplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlamatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlamat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_SUPPLIERRow
            Get
                Return CType(Me.Rows(index),T_SUPPLIERRow)
            End Get
        End Property
        
        Public Event T_SUPPLIERRowChanging As T_SUPPLIERRowChangeEventHandler
        
        Public Event T_SUPPLIERRowChanged As T_SUPPLIERRowChangeEventHandler
        
        Public Event T_SUPPLIERRowDeleting As T_SUPPLIERRowChangeEventHandler
        
        Public Event T_SUPPLIERRowDeleted As T_SUPPLIERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_SUPPLIERRow(ByVal row As T_SUPPLIERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_SUPPLIERRow(ByVal Kd_Supplier As String, ByVal Nm_Supplier As String, ByVal Alamat As String, ByVal Telp As String, ByVal Email As String) As T_SUPPLIERRow
            Dim rowT_SUPPLIERRow As T_SUPPLIERRow = CType(Me.NewRow,T_SUPPLIERRow)
            Dim columnValuesArray() As Object = New Object() {Kd_Supplier, Nm_Supplier, Alamat, Telp, Email}
            rowT_SUPPLIERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_SUPPLIERRow)
            Return rowT_SUPPLIERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByKd_Supplier(ByVal Kd_Supplier As String) As T_SUPPLIERRow
            Return CType(Me.Rows.Find(New Object() {Kd_Supplier}),T_SUPPLIERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_SUPPLIERDataTable = CType(MyBase.Clone,T_SUPPLIERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_SUPPLIERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKd_Supplier = MyBase.Columns("Kd_Supplier")
            Me.columnNm_Supplier = MyBase.Columns("Nm_Supplier")
            Me.columnAlamat = MyBase.Columns("Alamat")
            Me.columnTelp = MyBase.Columns("Telp")
            Me.columnEmail = MyBase.Columns("Email")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKd_Supplier = New Global.System.Data.DataColumn("Kd_Supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKd_Supplier)
            Me.columnNm_Supplier = New Global.System.Data.DataColumn("Nm_Supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNm_Supplier)
            Me.columnAlamat = New Global.System.Data.DataColumn("Alamat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlamat)
            Me.columnTelp = New Global.System.Data.DataColumn("Telp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelp)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnKd_Supplier}, true))
            Me.columnKd_Supplier.AllowDBNull = false
            Me.columnKd_Supplier.Unique = true
            Me.columnKd_Supplier.MaxLength = 7
            Me.columnNm_Supplier.MaxLength = 50
            Me.columnAlamat.MaxLength = 50
            Me.columnTelp.MaxLength = 12
            Me.columnEmail.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_SUPPLIERRow() As T_SUPPLIERRow
            Return CType(Me.NewRow,T_SUPPLIERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_SUPPLIERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_SUPPLIERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_SUPPLIERRowChangedEvent) Is Nothing) Then
                RaiseEvent T_SUPPLIERRowChanged(Me, New T_SUPPLIERRowChangeEvent(CType(e.Row,T_SUPPLIERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_SUPPLIERRowChangingEvent) Is Nothing) Then
                RaiseEvent T_SUPPLIERRowChanging(Me, New T_SUPPLIERRowChangeEvent(CType(e.Row,T_SUPPLIERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_SUPPLIERRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_SUPPLIERRowDeleted(Me, New T_SUPPLIERRowChangeEvent(CType(e.Row,T_SUPPLIERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_SUPPLIERRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_SUPPLIERRowDeleting(Me, New T_SUPPLIERRowChangeEvent(CType(e.Row,T_SUPPLIERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_SUPPLIERRow(ByVal row As T_SUPPLIERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DbTokoBukuDataSet = New DbTokoBukuDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_SUPPLIERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_BARANGRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_BARANG As T_BARANGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_BARANG = CType(Me.Table,T_BARANGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Barang() As String
            Get
                Return CType(Me(Me.tableT_BARANG.Kd_BarangColumn),String)
            End Get
            Set
                Me(Me.tableT_BARANG.Kd_BarangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nm_Barang() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_BARANG.Nm_BarangColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nm_Barang' in table 'T_BARANG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_BARANG.Nm_BarangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Katagori() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_BARANG.Kd_KatagoriColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Kd_Katagori' in table 'T_BARANG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_BARANG.Kd_KatagoriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stock() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableT_BARANG.StockColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Stock' in table 'T_BARANG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_BARANG.StockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hrg_Pokok() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_BARANG.Hrg_PokokColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hrg_Pokok' in table 'T_BARANG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_BARANG.Hrg_PokokColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hrg_Jual() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_BARANG.Hrg_JualColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hrg_Jual' in table 'T_BARANG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_BARANG.Hrg_JualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_KATEGORIRow() As T_KATEGORIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_BARANG_T_KATEGORI")),T_KATEGORIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_BARANG_T_KATEGORI"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNm_BarangNull() As Boolean
            Return Me.IsNull(Me.tableT_BARANG.Nm_BarangColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNm_BarangNull()
            Me(Me.tableT_BARANG.Nm_BarangColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKd_KatagoriNull() As Boolean
            Return Me.IsNull(Me.tableT_BARANG.Kd_KatagoriColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKd_KatagoriNull()
            Me(Me.tableT_BARANG.Kd_KatagoriColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStockNull() As Boolean
            Return Me.IsNull(Me.tableT_BARANG.StockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStockNull()
            Me(Me.tableT_BARANG.StockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHrg_PokokNull() As Boolean
            Return Me.IsNull(Me.tableT_BARANG.Hrg_PokokColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHrg_PokokNull()
            Me(Me.tableT_BARANG.Hrg_PokokColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHrg_JualNull() As Boolean
            Return Me.IsNull(Me.tableT_BARANG.Hrg_JualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHrg_JualNull()
            Me(Me.tableT_BARANG.Hrg_JualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetT_PENJUALAN_DETAILRows() As T_PENJUALAN_DETAILRow()
            If (Me.Table.ChildRelations("FK_T_PENJUALAN_DETAIL_T_BARANG") Is Nothing) Then
                Return New T_PENJUALAN_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PENJUALAN_DETAIL_T_BARANG")),T_PENJUALAN_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_KATEGORIRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_KATEGORI As T_KATEGORIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_KATEGORI = CType(Me.Table,T_KATEGORIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Katagori() As String
            Get
                Return CType(Me(Me.tableT_KATEGORI.Kd_KatagoriColumn),String)
            End Get
            Set
                Me(Me.tableT_KATEGORI.Kd_KatagoriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nm_Katagori() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_KATEGORI.Nm_KatagoriColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nm_Katagori' in table 'T_KATEGORI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_KATEGORI.Nm_KatagoriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNm_KatagoriNull() As Boolean
            Return Me.IsNull(Me.tableT_KATEGORI.Nm_KatagoriColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNm_KatagoriNull()
            Me(Me.tableT_KATEGORI.Nm_KatagoriColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetT_BARANGRows() As T_BARANGRow()
            If (Me.Table.ChildRelations("FK_T_BARANG_T_KATEGORI") Is Nothing) Then
                Return New T_BARANGRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_BARANG_T_KATEGORI")),T_BARANGRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_PEMBELIANRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_PEMBELIAN As T_PEMBELIANDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_PEMBELIAN = CType(Me.Table,T_PEMBELIANDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Pembelian() As String
            Get
                Return CType(Me(Me.tableT_PEMBELIAN.Kd_PembelianColumn),String)
            End Get
            Set
                Me(Me.tableT_PEMBELIAN.Kd_PembelianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tgl_Pembelian() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN.Tgl_PembelianColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tgl_Pembelian' in table 'T_PEMBELIAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN.Tgl_PembelianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Suplier() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN.Kd_SuplierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Kd_Suplier' in table 'T_PEMBELIAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN.Kd_SuplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN.TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'T_PEMBELIAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Potongan() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN.PotonganColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Potongan' in table 'T_PEMBELIAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN.PotonganColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grand_Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN.Grand_TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grand_Total' in table 'T_PEMBELIAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN.Grand_TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_SUPPLIERRow() As T_SUPPLIERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PEMBELIAN_T_SUPPLIER")),T_SUPPLIERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PEMBELIAN_T_SUPPLIER"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTgl_PembelianNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN.Tgl_PembelianColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTgl_PembelianNull()
            Me(Me.tableT_PEMBELIAN.Tgl_PembelianColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKd_SuplierNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN.Kd_SuplierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKd_SuplierNull()
            Me(Me.tableT_PEMBELIAN.Kd_SuplierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableT_PEMBELIAN.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPotonganNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN.PotonganColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPotonganNull()
            Me(Me.tableT_PEMBELIAN.PotonganColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrand_TotalNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN.Grand_TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrand_TotalNull()
            Me(Me.tableT_PEMBELIAN.Grand_TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetT_PEMBELIAN_DETAILRows() As T_PEMBELIAN_DETAILRow()
            If (Me.Table.ChildRelations("FK_T_PEMBELIAN_DETAIL_T_PEMBELIAN") Is Nothing) Then
                Return New T_PEMBELIAN_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PEMBELIAN_DETAIL_T_PEMBELIAN")),T_PEMBELIAN_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_PEMBELIAN_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_PEMBELIAN_DETAIL As T_PEMBELIAN_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_PEMBELIAN_DETAIL = CType(Me.Table,T_PEMBELIAN_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Pembelian() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN_DETAIL.Kd_PembelianColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Kd_Pembelian' in table 'T_PEMBELIAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN_DETAIL.Kd_PembelianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Barang() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN_DETAIL.Kd_BarangColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Kd_Barang' in table 'T_PEMBELIAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN_DETAIL.Kd_BarangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN_DETAIL.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'T_PEMBELIAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN_DETAIL.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Harga_Beli() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN_DETAIL.Harga_BeliColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Harga_Beli' in table 'T_PEMBELIAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN_DETAIL.Harga_BeliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sub_Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PEMBELIAN_DETAIL.Sub_TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sub_Total' in table 'T_PEMBELIAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PEMBELIAN_DETAIL.Sub_TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_PEMBELIANRow() As T_PEMBELIANRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PEMBELIAN_DETAIL_T_PEMBELIAN")),T_PEMBELIANRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PEMBELIAN_DETAIL_T_PEMBELIAN"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKd_PembelianNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN_DETAIL.Kd_PembelianColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKd_PembelianNull()
            Me(Me.tableT_PEMBELIAN_DETAIL.Kd_PembelianColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKd_BarangNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN_DETAIL.Kd_BarangColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKd_BarangNull()
            Me(Me.tableT_PEMBELIAN_DETAIL.Kd_BarangColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN_DETAIL.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableT_PEMBELIAN_DETAIL.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHarga_BeliNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN_DETAIL.Harga_BeliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHarga_BeliNull()
            Me(Me.tableT_PEMBELIAN_DETAIL.Harga_BeliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSub_TotalNull() As Boolean
            Return Me.IsNull(Me.tableT_PEMBELIAN_DETAIL.Sub_TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSub_TotalNull()
            Me(Me.tableT_PEMBELIAN_DETAIL.Sub_TotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_PENJUALANRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_PENJUALAN As T_PENJUALANDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_PENJUALAN = CType(Me.Table,T_PENJUALANDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Penjualan() As String
            Get
                Return CType(Me(Me.tableT_PENJUALAN.Kd_PenjualanColumn),String)
            End Get
            Set
                Me(Me.tableT_PENJUALAN.Kd_PenjualanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tgl_Penjualan() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN.Tgl_PenjualanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tgl_Penjualan' in table 'T_PENJUALAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN.Tgl_PenjualanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN.TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'T_PENJUALAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bayar() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN.BayarColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bayar' in table 'T_PENJUALAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN.BayarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grand_Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN.Grand_TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grand_Total' in table 'T_PENJUALAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN.Grand_TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTgl_PenjualanNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN.Tgl_PenjualanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTgl_PenjualanNull()
            Me(Me.tableT_PENJUALAN.Tgl_PenjualanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableT_PENJUALAN.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBayarNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN.BayarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBayarNull()
            Me(Me.tableT_PENJUALAN.BayarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrand_TotalNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN.Grand_TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrand_TotalNull()
            Me(Me.tableT_PENJUALAN.Grand_TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetT_PENJUALAN_DETAILRows() As T_PENJUALAN_DETAILRow()
            If (Me.Table.ChildRelations("FK_T_PENJUALAN_DETAIL_T_PENJUALAN") Is Nothing) Then
                Return New T_PENJUALAN_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PENJUALAN_DETAIL_T_PENJUALAN")),T_PENJUALAN_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_PENJUALAN_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_PENJUALAN_DETAIL As T_PENJUALAN_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_PENJUALAN_DETAIL = CType(Me.Table,T_PENJUALAN_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Penjualan() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN_DETAIL.Kd_PenjualanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Kd_Penjualan' in table 'T_PENJUALAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN_DETAIL.Kd_PenjualanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Barang() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN_DETAIL.Kd_BarangColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Kd_Barang' in table 'T_PENJUALAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN_DETAIL.Kd_BarangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN_DETAIL.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'T_PENJUALAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN_DETAIL.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Harga_Beli() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN_DETAIL.Harga_BeliColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Harga_Beli' in table 'T_PENJUALAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN_DETAIL.Harga_BeliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sub_Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableT_PENJUALAN_DETAIL.Sub_TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sub_Total' in table 'T_PENJUALAN_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_PENJUALAN_DETAIL.Sub_TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_BARANGRow() As T_BARANGRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PENJUALAN_DETAIL_T_BARANG")),T_BARANGRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PENJUALAN_DETAIL_T_BARANG"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_PENJUALANRow() As T_PENJUALANRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PENJUALAN_DETAIL_T_PENJUALAN")),T_PENJUALANRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PENJUALAN_DETAIL_T_PENJUALAN"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKd_PenjualanNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN_DETAIL.Kd_PenjualanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKd_PenjualanNull()
            Me(Me.tableT_PENJUALAN_DETAIL.Kd_PenjualanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKd_BarangNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN_DETAIL.Kd_BarangColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKd_BarangNull()
            Me(Me.tableT_PENJUALAN_DETAIL.Kd_BarangColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN_DETAIL.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableT_PENJUALAN_DETAIL.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHarga_BeliNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN_DETAIL.Harga_BeliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHarga_BeliNull()
            Me(Me.tableT_PENJUALAN_DETAIL.Harga_BeliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSub_TotalNull() As Boolean
            Return Me.IsNull(Me.tableT_PENJUALAN_DETAIL.Sub_TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSub_TotalNull()
            Me(Me.tableT_PENJUALAN_DETAIL.Sub_TotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_SUPPLIERRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_SUPPLIER As T_SUPPLIERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_SUPPLIER = CType(Me.Table,T_SUPPLIERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kd_Supplier() As String
            Get
                Return CType(Me(Me.tableT_SUPPLIER.Kd_SupplierColumn),String)
            End Get
            Set
                Me(Me.tableT_SUPPLIER.Kd_SupplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nm_Supplier() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_SUPPLIER.Nm_SupplierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nm_Supplier' in table 'T_SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_SUPPLIER.Nm_SupplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Alamat() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_SUPPLIER.AlamatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Alamat' in table 'T_SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_SUPPLIER.AlamatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telp() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_SUPPLIER.TelpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telp' in table 'T_SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_SUPPLIER.TelpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableT_SUPPLIER.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'T_SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableT_SUPPLIER.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNm_SupplierNull() As Boolean
            Return Me.IsNull(Me.tableT_SUPPLIER.Nm_SupplierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNm_SupplierNull()
            Me(Me.tableT_SUPPLIER.Nm_SupplierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlamatNull() As Boolean
            Return Me.IsNull(Me.tableT_SUPPLIER.AlamatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlamatNull()
            Me(Me.tableT_SUPPLIER.AlamatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelpNull() As Boolean
            Return Me.IsNull(Me.tableT_SUPPLIER.TelpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelpNull()
            Me(Me.tableT_SUPPLIER.TelpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableT_SUPPLIER.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableT_SUPPLIER.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetT_PEMBELIANRows() As T_PEMBELIANRow()
            If (Me.Table.ChildRelations("FK_T_PEMBELIAN_T_SUPPLIER") Is Nothing) Then
                Return New T_PEMBELIANRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PEMBELIAN_T_SUPPLIER")),T_PEMBELIANRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_BARANGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_BARANGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_BARANGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_BARANGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_KATEGORIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_KATEGORIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_KATEGORIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_KATEGORIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_PEMBELIANRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_PEMBELIANRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_PEMBELIANRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_PEMBELIANRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_PEMBELIAN_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_PEMBELIAN_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_PEMBELIAN_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_PEMBELIAN_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_PENJUALANRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_PENJUALANRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_PENJUALANRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_PENJUALANRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_PENJUALAN_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_PENJUALAN_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_PENJUALAN_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_PENJUALAN_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_SUPPLIERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_SUPPLIERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_SUPPLIERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_SUPPLIERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DbTokoBukuDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class T_BARANGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "T_BARANG"
            tableMapping.ColumnMappings.Add("Kd_Barang", "Kd_Barang")
            tableMapping.ColumnMappings.Add("Nm_Barang", "Nm_Barang")
            tableMapping.ColumnMappings.Add("Kd_Katagori", "Kd_Katagori")
            tableMapping.ColumnMappings.Add("Stock", "Stock")
            tableMapping.ColumnMappings.Add("Hrg_Pokok", "Hrg_Pokok")
            tableMapping.ColumnMappings.Add("Hrg_Jual", "Hrg_Jual")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[T_BARANG] WHERE (([Kd_Barang] = @Original_Kd_Barang) AND ((@Is"& _ 
                "Null_Nm_Barang = 1 AND [Nm_Barang] IS NULL) OR ([Nm_Barang] = @Original_Nm_Baran"& _ 
                "g)) AND ((@IsNull_Kd_Katagori = 1 AND [Kd_Katagori] IS NULL) OR ([Kd_Katagori] ="& _ 
                " @Original_Kd_Katagori)) AND ((@IsNull_Stock = 1 AND [Stock] IS NULL) OR ([Stock"& _ 
                "] = @Original_Stock)) AND ((@IsNull_Hrg_Pokok = 1 AND [Hrg_Pokok] IS NULL) OR (["& _ 
                "Hrg_Pokok] = @Original_Hrg_Pokok)) AND ((@IsNull_Hrg_Jual = 1 AND [Hrg_Jual] IS "& _ 
                "NULL) OR ([Hrg_Jual] = @Original_Hrg_Jual)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Barang", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nm_Barang", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Barang", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nm_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Barang", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Kd_Katagori", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Hrg_Pokok", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hrg_Pokok", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hrg_Pokok", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Hrg_Pokok", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Hrg_Jual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hrg_Jual", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hrg_Jual", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Hrg_Jual", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[T_BARANG] ([Kd_Barang], [Nm_Barang], [Kd_Katagori], [Stock], ["& _ 
                "Hrg_Pokok], [Hrg_Jual]) VALUES (@Kd_Barang, @Nm_Barang, @Kd_Katagori, @Stock, @H"& _ 
                "rg_Pokok, @Hrg_Jual);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Kd_Barang, Nm_Barang, Kd_Katagori, Stock, Hrg_Poko"& _ 
                "k, Hrg_Jual FROM T_BARANG WHERE (Kd_Barang = @Kd_Barang)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Barang", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nm_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Barang", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hrg_Pokok", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Hrg_Pokok", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hrg_Jual", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Hrg_Jual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[T_BARANG] SET [Kd_Barang] = @Kd_Barang, [Nm_Barang] = @Nm_Barang, ["& _ 
                "Kd_Katagori] = @Kd_Katagori, [Stock] = @Stock, [Hrg_Pokok] = @Hrg_Pokok, [Hrg_Ju"& _ 
                "al] = @Hrg_Jual WHERE (([Kd_Barang] = @Original_Kd_Barang) AND ((@IsNull_Nm_Bara"& _ 
                "ng = 1 AND [Nm_Barang] IS NULL) OR ([Nm_Barang] = @Original_Nm_Barang)) AND ((@I"& _ 
                "sNull_Kd_Katagori = 1 AND [Kd_Katagori] IS NULL) OR ([Kd_Katagori] = @Original_K"& _ 
                "d_Katagori)) AND ((@IsNull_Stock = 1 AND [Stock] IS NULL) OR ([Stock] = @Origina"& _ 
                "l_Stock)) AND ((@IsNull_Hrg_Pokok = 1 AND [Hrg_Pokok] IS NULL) OR ([Hrg_Pokok] ="& _ 
                " @Original_Hrg_Pokok)) AND ((@IsNull_Hrg_Jual = 1 AND [Hrg_Jual] IS NULL) OR ([H"& _ 
                "rg_Jual] = @Original_Hrg_Jual)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Kd_Barang, Nm_Barang, Kd_Katagori, Sto"& _ 
                "ck, Hrg_Pokok, Hrg_Jual FROM T_BARANG WHERE (Kd_Barang = @Kd_Barang)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Barang", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nm_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Barang", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hrg_Pokok", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Hrg_Pokok", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hrg_Jual", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Hrg_Jual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Barang", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nm_Barang", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Barang", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nm_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Barang", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Kd_Katagori", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stock", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Hrg_Pokok", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hrg_Pokok", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hrg_Pokok", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Hrg_Pokok", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Hrg_Jual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hrg_Jual", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hrg_Jual", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Hrg_Jual", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Toko_Buku.My.MySettings.Default.DbTokoBukuConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Kd_Barang, Nm_Barang, Kd_Katagori, Stock, Hrg_Pokok, Hrg_Jual FROM dbo.T_B"& _ 
                "ARANG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DbTokoBukuDataSet.T_BARANGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DbTokoBukuDataSet.T_BARANGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DbTokoBukuDataSet.T_BARANGDataTable = New DbTokoBukuDataSet.T_BARANGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DbTokoBukuDataSet.T_BARANGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DbTokoBukuDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "T_BARANG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Kd_Barang As String, ByVal Original_Nm_Barang As String, ByVal Original_Kd_Katagori As String, ByVal Original_Stock As Global.System.Nullable(Of Integer), ByVal Original_Hrg_Pokok As Global.System.Nullable(Of Decimal), ByVal Original_Hrg_Jual As Global.System.Nullable(Of Decimal)) As Integer
            If (Original_Kd_Barang Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Barang")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Kd_Barang,String)
            End If
            If (Original_Nm_Barang Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Nm_Barang,String)
            End If
            If (Original_Kd_Katagori Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Kd_Katagori,String)
            End If
            If (Original_Stock.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Stock.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Hrg_Pokok.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Hrg_Pokok.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Hrg_Jual.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Hrg_Jual.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Kd_Barang As String, ByVal Nm_Barang As String, ByVal Kd_Katagori As String, ByVal Stock As Global.System.Nullable(Of Integer), ByVal Hrg_Pokok As Global.System.Nullable(Of Decimal), ByVal Hrg_Jual As Global.System.Nullable(Of Decimal)) As Integer
            If (Kd_Barang Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Barang")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Kd_Barang,String)
            End If
            If (Nm_Barang Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Nm_Barang,String)
            End If
            If (Kd_Katagori Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Kd_Katagori,String)
            End If
            If (Stock.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Stock.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Hrg_Pokok.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Hrg_Pokok.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Hrg_Jual.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Hrg_Jual.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Kd_Barang As String, ByVal Nm_Barang As String, ByVal Kd_Katagori As String, ByVal Stock As Global.System.Nullable(Of Integer), ByVal Hrg_Pokok As Global.System.Nullable(Of Decimal), ByVal Hrg_Jual As Global.System.Nullable(Of Decimal), ByVal Original_Kd_Barang As String, ByVal Original_Nm_Barang As String, ByVal Original_Kd_Katagori As String, ByVal Original_Stock As Global.System.Nullable(Of Integer), ByVal Original_Hrg_Pokok As Global.System.Nullable(Of Decimal), ByVal Original_Hrg_Jual As Global.System.Nullable(Of Decimal)) As Integer
            If (Kd_Barang Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Barang")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Kd_Barang,String)
            End If
            If (Nm_Barang Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Nm_Barang,String)
            End If
            If (Kd_Katagori Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Kd_Katagori,String)
            End If
            If (Stock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Stock.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Hrg_Pokok.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Hrg_Pokok.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Hrg_Jual.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Hrg_Jual.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_Kd_Barang Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Barang")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Kd_Barang,String)
            End If
            If (Original_Nm_Barang Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Nm_Barang,String)
            End If
            If (Original_Kd_Katagori Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Kd_Katagori,String)
            End If
            If (Original_Stock.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Stock.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Hrg_Pokok.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Hrg_Pokok.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Hrg_Jual.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Hrg_Jual.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Nm_Barang As String, ByVal Kd_Katagori As String, ByVal Stock As Global.System.Nullable(Of Integer), ByVal Hrg_Pokok As Global.System.Nullable(Of Decimal), ByVal Hrg_Jual As Global.System.Nullable(Of Decimal), ByVal Original_Kd_Barang As String, ByVal Original_Nm_Barang As String, ByVal Original_Kd_Katagori As String, ByVal Original_Stock As Global.System.Nullable(Of Integer), ByVal Original_Hrg_Pokok As Global.System.Nullable(Of Decimal), ByVal Original_Hrg_Jual As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_Kd_Barang, Nm_Barang, Kd_Katagori, Stock, Hrg_Pokok, Hrg_Jual, Original_Kd_Barang, Original_Nm_Barang, Original_Kd_Katagori, Original_Stock, Original_Hrg_Pokok, Original_Hrg_Jual)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class T_KATEGORITableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "T_KATEGORI"
            tableMapping.ColumnMappings.Add("Kd_Katagori", "Kd_Katagori")
            tableMapping.ColumnMappings.Add("Nm_Katagori", "Nm_Katagori")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[T_KATEGORI] WHERE (([Kd_Katagori] = @Original_Kd_Katagori) AND"& _ 
                " ((@IsNull_Nm_Katagori = 1 AND [Nm_Katagori] IS NULL) OR ([Nm_Katagori] = @Origi"& _ 
                "nal_Nm_Katagori)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nm_Katagori", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Katagori", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nm_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Katagori", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[T_KATEGORI] ([Kd_Katagori], [Nm_Katagori]) VALUES (@Kd_Katagor"& _ 
                "i, @Nm_Katagori);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Kd_Katagori, Nm_Katagori FROM T_KATEGORI WHERE (Kd_Kat"& _ 
                "agori = @Kd_Katagori)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nm_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Katagori", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[T_KATEGORI] SET [Kd_Katagori] = @Kd_Katagori, [Nm_Katagori] = @Nm_K"& _ 
                "atagori WHERE (([Kd_Katagori] = @Original_Kd_Katagori) AND ((@IsNull_Nm_Katagori"& _ 
                " = 1 AND [Nm_Katagori] IS NULL) OR ([Nm_Katagori] = @Original_Nm_Katagori)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT Kd_Katagori, Nm_Katagori FROM T_KATEGORI WHERE (Kd_Katagori = @Kd_Katagori"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nm_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Katagori", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Katagori", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nm_Katagori", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Katagori", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nm_Katagori", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Katagori", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Toko_Buku.My.MySettings.Default.DbTokoBukuConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Kd_Katagori, Nm_Katagori FROM dbo.T_KATEGORI"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DbTokoBukuDataSet.T_KATEGORIDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DbTokoBukuDataSet.T_KATEGORIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DbTokoBukuDataSet.T_KATEGORIDataTable = New DbTokoBukuDataSet.T_KATEGORIDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DbTokoBukuDataSet.T_KATEGORIDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DbTokoBukuDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "T_KATEGORI")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Kd_Katagori As String, ByVal Original_Nm_Katagori As String) As Integer
            If (Original_Kd_Katagori Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Katagori")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Kd_Katagori,String)
            End If
            If (Original_Nm_Katagori Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Nm_Katagori,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Kd_Katagori As String, ByVal Nm_Katagori As String) As Integer
            If (Kd_Katagori Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Katagori")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Kd_Katagori,String)
            End If
            If (Nm_Katagori Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Nm_Katagori,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Kd_Katagori As String, ByVal Nm_Katagori As String, ByVal Original_Kd_Katagori As String, ByVal Original_Nm_Katagori As String) As Integer
            If (Kd_Katagori Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Katagori")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Kd_Katagori,String)
            End If
            If (Nm_Katagori Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Nm_Katagori,String)
            End If
            If (Original_Kd_Katagori Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Katagori")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_Kd_Katagori,String)
            End If
            If (Original_Nm_Katagori Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Nm_Katagori,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Nm_Katagori As String, ByVal Original_Kd_Katagori As String, ByVal Original_Nm_Katagori As String) As Integer
            Return Me.Update(Original_Kd_Katagori, Nm_Katagori, Original_Kd_Katagori, Original_Nm_Katagori)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class T_PEMBELIANTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "T_PEMBELIAN"
            tableMapping.ColumnMappings.Add("Kd_Pembelian", "Kd_Pembelian")
            tableMapping.ColumnMappings.Add("Tgl_Pembelian", "Tgl_Pembelian")
            tableMapping.ColumnMappings.Add("Kd_Suplier", "Kd_Suplier")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("Potongan", "Potongan")
            tableMapping.ColumnMappings.Add("Grand_Total", "Grand_Total")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[T_PEMBELIAN] WHERE (([Kd_Pembelian] = @Original_Kd_Pembelian) "& _ 
                "AND ((@IsNull_Tgl_Pembelian = 1 AND [Tgl_Pembelian] IS NULL) OR ([Tgl_Pembelian]"& _ 
                " = @Original_Tgl_Pembelian)) AND ((@IsNull_Kd_Suplier = 1 AND [Kd_Suplier] IS NU"& _ 
                "LL) OR ([Kd_Suplier] = @Original_Kd_Suplier)) AND ((@IsNull_Total = 1 AND [Total"& _ 
                "] IS NULL) OR ([Total] = @Original_Total)) AND ((@IsNull_Potongan = 1 AND [Poton"& _ 
                "gan] IS NULL) OR ([Potongan] = @Original_Potongan)) AND ((@IsNull_Grand_Total = "& _ 
                "1 AND [Grand_Total] IS NULL) OR ([Grand_Total] = @Original_Grand_Total)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Pembelian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Pembelian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tgl_Pembelian", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tgl_Pembelian", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Kd_Suplier", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Suplier", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Suplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Suplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Potongan", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Potongan", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Potongan", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Potongan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Grand_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Grand_Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Grand_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Grand_Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[T_PEMBELIAN] ([Kd_Pembelian], [Tgl_Pembelian], [Kd_Suplier], ["& _ 
                "Total], [Potongan], [Grand_Total]) VALUES (@Kd_Pembelian, @Tgl_Pembelian, @Kd_Su"& _ 
                "plier, @Total, @Potongan, @Grand_Total);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Kd_Pembelian, Tgl_Pembelian, Kd"& _ 
                "_Suplier, Total, Potongan, Grand_Total FROM T_PEMBELIAN WHERE (Kd_Pembelian = @K"& _ 
                "d_Pembelian)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Pembelian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Pembelian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tgl_Pembelian", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Suplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Suplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Potongan", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Potongan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Grand_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Grand_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[T_PEMBELIAN] SET [Kd_Pembelian] = @Kd_Pembelian, [Tgl_Pembelian] = "& _ 
                "@Tgl_Pembelian, [Kd_Suplier] = @Kd_Suplier, [Total] = @Total, [Potongan] = @Poto"& _ 
                "ngan, [Grand_Total] = @Grand_Total WHERE (([Kd_Pembelian] = @Original_Kd_Pembeli"& _ 
                "an) AND ((@IsNull_Tgl_Pembelian = 1 AND [Tgl_Pembelian] IS NULL) OR ([Tgl_Pembel"& _ 
                "ian] = @Original_Tgl_Pembelian)) AND ((@IsNull_Kd_Suplier = 1 AND [Kd_Suplier] I"& _ 
                "S NULL) OR ([Kd_Suplier] = @Original_Kd_Suplier)) AND ((@IsNull_Total = 1 AND [T"& _ 
                "otal] IS NULL) OR ([Total] = @Original_Total)) AND ((@IsNull_Potongan = 1 AND [P"& _ 
                "otongan] IS NULL) OR ([Potongan] = @Original_Potongan)) AND ((@IsNull_Grand_Tota"& _ 
                "l = 1 AND [Grand_Total] IS NULL) OR ([Grand_Total] = @Original_Grand_Total)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT Kd_Pembelian, Tgl_Pembelian, Kd_Suplier, Total, Potongan, Grand_Total FRO"& _ 
                "M T_PEMBELIAN WHERE (Kd_Pembelian = @Kd_Pembelian)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Pembelian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Pembelian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tgl_Pembelian", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Suplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Suplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Potongan", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Potongan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Grand_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Grand_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Pembelian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Pembelian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tgl_Pembelian", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tgl_Pembelian", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Kd_Suplier", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Suplier", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Suplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Suplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Potongan", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Potongan", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Potongan", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Potongan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Grand_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Grand_Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Grand_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Grand_Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Toko_Buku.My.MySettings.Default.DbTokoBukuConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Kd_Pembelian, Tgl_Pembelian, Kd_Suplier, Total, Potongan, Grand_Total FROM"& _ 
                " dbo.T_PEMBELIAN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Kd_Pembelian, Tgl_Pembelian, Kd_Suplier, Total, Potongan, Grand_Total FROM"& _ 
                " dbo.T_PEMBELIAN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Tgl_Pembelian=@awal)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@awal", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Kd_Pembelian, Tgl_Pembelian, Kd_Suplier, Total, Potongan, Grand_Total FROM"& _ 
                " dbo.T_PEMBELIAN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (Tgl_Pembelian BETWEEN @awal AND @akhir)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@awal", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@akhir", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Pembelian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DbTokoBukuDataSet.T_PEMBELIANDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DbTokoBukuDataSet.T_PEMBELIANDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DbTokoBukuDataSet.T_PEMBELIANDataTable = New DbTokoBukuDataSet.T_PEMBELIANDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function awal(ByVal dataTable As DbTokoBukuDataSet.T_PEMBELIANDataTable, ByVal awal1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (awal1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(awal1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal awal As String) As DbTokoBukuDataSet.T_PEMBELIANDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (awal Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(awal,String)
            End If
            Dim dataTable As DbTokoBukuDataSet.T_PEMBELIANDataTable = New DbTokoBukuDataSet.T_PEMBELIANDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function tanggal(ByVal dataTable As DbTokoBukuDataSet.T_PEMBELIANDataTable, ByVal awal As String, ByVal akhir As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (awal Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(awal,String)
            End If
            If (akhir Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(akhir,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1(ByVal awal As String, ByVal akhir As String) As DbTokoBukuDataSet.T_PEMBELIANDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (awal Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(awal,String)
            End If
            If (akhir Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(akhir,String)
            End If
            Dim dataTable As DbTokoBukuDataSet.T_PEMBELIANDataTable = New DbTokoBukuDataSet.T_PEMBELIANDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DbTokoBukuDataSet.T_PEMBELIANDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DbTokoBukuDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "T_PEMBELIAN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Kd_Pembelian As String, ByVal Original_Tgl_Pembelian As String, ByVal Original_Kd_Suplier As String, ByVal Original_Total As Global.System.Nullable(Of Decimal), ByVal Original_Potongan As Global.System.Nullable(Of Decimal), ByVal Original_Grand_Total As Global.System.Nullable(Of Decimal)) As Integer
            If (Original_Kd_Pembelian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Pembelian")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Kd_Pembelian,String)
            End If
            If (Original_Tgl_Pembelian Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Tgl_Pembelian,String)
            End If
            If (Original_Kd_Suplier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Kd_Suplier,String)
            End If
            If (Original_Total.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Total.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Potongan.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Potongan.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Grand_Total.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Grand_Total.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Kd_Pembelian As String, ByVal Tgl_Pembelian As String, ByVal Kd_Suplier As String, ByVal Total As Global.System.Nullable(Of Decimal), ByVal Potongan As Global.System.Nullable(Of Decimal), ByVal Grand_Total As Global.System.Nullable(Of Decimal)) As Integer
            If (Kd_Pembelian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Pembelian")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Kd_Pembelian,String)
            End If
            If (Tgl_Pembelian Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Tgl_Pembelian,String)
            End If
            If (Kd_Suplier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Kd_Suplier,String)
            End If
            If (Total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Total.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Potongan.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Potongan.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Grand_Total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Grand_Total.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Kd_Pembelian As String, ByVal Tgl_Pembelian As String, ByVal Kd_Suplier As String, ByVal Total As Global.System.Nullable(Of Decimal), ByVal Potongan As Global.System.Nullable(Of Decimal), ByVal Grand_Total As Global.System.Nullable(Of Decimal), ByVal Original_Kd_Pembelian As String, ByVal Original_Tgl_Pembelian As String, ByVal Original_Kd_Suplier As String, ByVal Original_Total As Global.System.Nullable(Of Decimal), ByVal Original_Potongan As Global.System.Nullable(Of Decimal), ByVal Original_Grand_Total As Global.System.Nullable(Of Decimal)) As Integer
            If (Kd_Pembelian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Pembelian")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Kd_Pembelian,String)
            End If
            If (Tgl_Pembelian Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Tgl_Pembelian,String)
            End If
            If (Kd_Suplier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Kd_Suplier,String)
            End If
            If (Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Potongan.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Potongan.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Grand_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Grand_Total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_Kd_Pembelian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Pembelian")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Kd_Pembelian,String)
            End If
            If (Original_Tgl_Pembelian Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Tgl_Pembelian,String)
            End If
            If (Original_Kd_Suplier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Kd_Suplier,String)
            End If
            If (Original_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Potongan.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Potongan.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Grand_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Grand_Total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Tgl_Pembelian As String, ByVal Kd_Suplier As String, ByVal Total As Global.System.Nullable(Of Decimal), ByVal Potongan As Global.System.Nullable(Of Decimal), ByVal Grand_Total As Global.System.Nullable(Of Decimal), ByVal Original_Kd_Pembelian As String, ByVal Original_Tgl_Pembelian As String, ByVal Original_Kd_Suplier As String, ByVal Original_Total As Global.System.Nullable(Of Decimal), ByVal Original_Potongan As Global.System.Nullable(Of Decimal), ByVal Original_Grand_Total As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_Kd_Pembelian, Tgl_Pembelian, Kd_Suplier, Total, Potongan, Grand_Total, Original_Kd_Pembelian, Original_Tgl_Pembelian, Original_Kd_Suplier, Original_Total, Original_Potongan, Original_Grand_Total)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class T_PEMBELIAN_DETAILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "T_PEMBELIAN_DETAIL"
            tableMapping.ColumnMappings.Add("Kd_Pembelian", "Kd_Pembelian")
            tableMapping.ColumnMappings.Add("Kd_Barang", "Kd_Barang")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("Harga_Beli", "Harga_Beli")
            tableMapping.ColumnMappings.Add("Sub_Total", "Sub_Total")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[T_PEMBELIAN_DETAIL] ([Kd_Pembelian], [Kd_Barang], [Qty], [Harg"& _ 
                "a_Beli], [Sub_Total]) VALUES (@Kd_Pembelian, @Kd_Barang, @Qty, @Harga_Beli, @Sub"& _ 
                "_Total)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Pembelian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Pembelian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Barang", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Harga_Beli", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Harga_Beli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sub_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Sub_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Toko_Buku.My.MySettings.Default.DbTokoBukuConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Kd_Pembelian, Kd_Barang, Qty, Harga_Beli, Sub_Total FROM dbo.T_PEMBELIAN_D"& _ 
                "ETAIL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DbTokoBukuDataSet.T_PEMBELIAN_DETAILDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DbTokoBukuDataSet.T_PEMBELIAN_DETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DbTokoBukuDataSet.T_PEMBELIAN_DETAILDataTable = New DbTokoBukuDataSet.T_PEMBELIAN_DETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DbTokoBukuDataSet.T_PEMBELIAN_DETAILDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DbTokoBukuDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "T_PEMBELIAN_DETAIL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Kd_Pembelian As String, ByVal Kd_Barang As String, ByVal Qty As Global.System.Nullable(Of Integer), ByVal Harga_Beli As Global.System.Nullable(Of Decimal), ByVal Sub_Total As Global.System.Nullable(Of Decimal)) As Integer
            If (Kd_Pembelian Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Kd_Pembelian,String)
            End If
            If (Kd_Barang Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Kd_Barang,String)
            End If
            If (Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Harga_Beli.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Harga_Beli.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Sub_Total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Sub_Total.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class T_PENJUALANTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "T_PENJUALAN"
            tableMapping.ColumnMappings.Add("Kd_Penjualan", "Kd_Penjualan")
            tableMapping.ColumnMappings.Add("Tgl_Penjualan", "Tgl_Penjualan")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("Bayar", "Bayar")
            tableMapping.ColumnMappings.Add("Grand_Total", "Grand_Total")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[T_PENJUALAN] WHERE (([Kd_Penjualan] = @Original_Kd_Penjualan) "& _ 
                "AND ((@IsNull_Tgl_Penjualan = 1 AND [Tgl_Penjualan] IS NULL) OR ([Tgl_Penjualan]"& _ 
                " = @Original_Tgl_Penjualan)) AND ((@IsNull_Total = 1 AND [Total] IS NULL) OR ([T"& _ 
                "otal] = @Original_Total)) AND ((@IsNull_Bayar = 1 AND [Bayar] IS NULL) OR ([Baya"& _ 
                "r] = @Original_Bayar)) AND ((@IsNull_Grand_Total = 1 AND [Grand_Total] IS NULL) "& _ 
                "OR ([Grand_Total] = @Original_Grand_Total)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Penjualan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Penjualan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tgl_Penjualan", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tgl_Penjualan", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Bayar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bayar", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Bayar", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Bayar", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Grand_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Grand_Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Grand_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Grand_Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[T_PENJUALAN] ([Kd_Penjualan], [Tgl_Penjualan], [Total], [Bayar"& _ 
                "], [Grand_Total]) VALUES (@Kd_Penjualan, @Tgl_Penjualan, @Total, @Bayar, @Grand_"& _ 
                "Total);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Kd_Penjualan, Tgl_Penjualan, Total, Bayar, Grand_Total FROM T_PE"& _ 
                "NJUALAN WHERE (Kd_Penjualan = @Kd_Penjualan)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Penjualan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Penjualan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tgl_Penjualan", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bayar", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Bayar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Grand_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Grand_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[T_PENJUALAN] SET [Kd_Penjualan] = @Kd_Penjualan, [Tgl_Penjualan] = "& _ 
                "@Tgl_Penjualan, [Total] = @Total, [Bayar] = @Bayar, [Grand_Total] = @Grand_Total"& _ 
                " WHERE (([Kd_Penjualan] = @Original_Kd_Penjualan) AND ((@IsNull_Tgl_Penjualan = "& _ 
                "1 AND [Tgl_Penjualan] IS NULL) OR ([Tgl_Penjualan] = @Original_Tgl_Penjualan)) A"& _ 
                "ND ((@IsNull_Total = 1 AND [Total] IS NULL) OR ([Total] = @Original_Total)) AND "& _ 
                "((@IsNull_Bayar = 1 AND [Bayar] IS NULL) OR ([Bayar] = @Original_Bayar)) AND ((@"& _ 
                "IsNull_Grand_Total = 1 AND [Grand_Total] IS NULL) OR ([Grand_Total] = @Original_"& _ 
                "Grand_Total)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Kd_Penjualan, Tgl_Penjualan, Total, Bayar, Grand_Total F"& _ 
                "ROM T_PENJUALAN WHERE (Kd_Penjualan = @Kd_Penjualan)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Penjualan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Penjualan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tgl_Penjualan", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bayar", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Bayar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Grand_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Grand_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Penjualan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Penjualan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tgl_Penjualan", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tgl_Penjualan", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Bayar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bayar", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Bayar", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Bayar", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Grand_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Grand_Total", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Grand_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Grand_Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Toko_Buku.My.MySettings.Default.DbTokoBukuConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Kd_Penjualan, Tgl_Penjualan, Total, Bayar, Grand_Total FROM dbo.T_PENJUALA"& _ 
                "N"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Kd_Penjualan, Tgl_Penjualan, Total, Bayar, Grand_Total FROM dbo.T_PENJUALA"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Tgl_Penjualan=@awal)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@awal", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Kd_Penjualan, Tgl_Penjualan, Total, Bayar, Grand_Total FROM dbo.T_PENJUALA"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (Tgl_Penjualan BETWEEN @awal AND @akhir)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@awal", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@akhir", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Tgl_Penjualan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DbTokoBukuDataSet.T_PENJUALANDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DbTokoBukuDataSet.T_PENJUALANDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DbTokoBukuDataSet.T_PENJUALANDataTable = New DbTokoBukuDataSet.T_PENJUALANDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function awal(ByVal dataTable As DbTokoBukuDataSet.T_PENJUALANDataTable, ByVal awal1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (awal1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(awal1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal awal As String) As DbTokoBukuDataSet.T_PENJUALANDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (awal Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(awal,String)
            End If
            Dim dataTable As DbTokoBukuDataSet.T_PENJUALANDataTable = New DbTokoBukuDataSet.T_PENJUALANDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function tanggal(ByVal dataTable As DbTokoBukuDataSet.T_PENJUALANDataTable, ByVal awal As String, ByVal akhir As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (awal Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(awal,String)
            End If
            If (akhir Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(akhir,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1(ByVal awal As String, ByVal akhir As String) As DbTokoBukuDataSet.T_PENJUALANDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (awal Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(awal,String)
            End If
            If (akhir Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(akhir,String)
            End If
            Dim dataTable As DbTokoBukuDataSet.T_PENJUALANDataTable = New DbTokoBukuDataSet.T_PENJUALANDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DbTokoBukuDataSet.T_PENJUALANDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DbTokoBukuDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "T_PENJUALAN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Kd_Penjualan As String, ByVal Original_Tgl_Penjualan As String, ByVal Original_Total As Global.System.Nullable(Of Decimal), ByVal Original_Bayar As Global.System.Nullable(Of Decimal), ByVal Original_Grand_Total As Global.System.Nullable(Of Decimal)) As Integer
            If (Original_Kd_Penjualan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Penjualan")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Kd_Penjualan,String)
            End If
            If (Original_Tgl_Penjualan Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Tgl_Penjualan,String)
            End If
            If (Original_Total.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Total.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Bayar.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Bayar.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Grand_Total.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Grand_Total.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Kd_Penjualan As String, ByVal Tgl_Penjualan As String, ByVal Total As Global.System.Nullable(Of Decimal), ByVal Bayar As Global.System.Nullable(Of Decimal), ByVal Grand_Total As Global.System.Nullable(Of Decimal)) As Integer
            If (Kd_Penjualan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Penjualan")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Kd_Penjualan,String)
            End If
            If (Tgl_Penjualan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Tgl_Penjualan,String)
            End If
            If (Total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Total.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Bayar.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Bayar.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Grand_Total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Grand_Total.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Kd_Penjualan As String, ByVal Tgl_Penjualan As String, ByVal Total As Global.System.Nullable(Of Decimal), ByVal Bayar As Global.System.Nullable(Of Decimal), ByVal Grand_Total As Global.System.Nullable(Of Decimal), ByVal Original_Kd_Penjualan As String, ByVal Original_Tgl_Penjualan As String, ByVal Original_Total As Global.System.Nullable(Of Decimal), ByVal Original_Bayar As Global.System.Nullable(Of Decimal), ByVal Original_Grand_Total As Global.System.Nullable(Of Decimal)) As Integer
            If (Kd_Penjualan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Penjualan")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Kd_Penjualan,String)
            End If
            If (Tgl_Penjualan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Tgl_Penjualan,String)
            End If
            If (Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Bayar.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Bayar.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Grand_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Grand_Total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Kd_Penjualan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Penjualan")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Kd_Penjualan,String)
            End If
            If (Original_Tgl_Penjualan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Tgl_Penjualan,String)
            End If
            If (Original_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Bayar.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Bayar.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_Grand_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Grand_Total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Tgl_Penjualan As String, ByVal Total As Global.System.Nullable(Of Decimal), ByVal Bayar As Global.System.Nullable(Of Decimal), ByVal Grand_Total As Global.System.Nullable(Of Decimal), ByVal Original_Kd_Penjualan As String, ByVal Original_Tgl_Penjualan As String, ByVal Original_Total As Global.System.Nullable(Of Decimal), ByVal Original_Bayar As Global.System.Nullable(Of Decimal), ByVal Original_Grand_Total As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_Kd_Penjualan, Tgl_Penjualan, Total, Bayar, Grand_Total, Original_Kd_Penjualan, Original_Tgl_Penjualan, Original_Total, Original_Bayar, Original_Grand_Total)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class T_PENJUALAN_DETAILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "T_PENJUALAN_DETAIL"
            tableMapping.ColumnMappings.Add("Kd_Penjualan", "Kd_Penjualan")
            tableMapping.ColumnMappings.Add("Kd_Barang", "Kd_Barang")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("Harga_Beli", "Harga_Beli")
            tableMapping.ColumnMappings.Add("Sub_Total", "Sub_Total")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[T_PENJUALAN_DETAIL] ([Kd_Penjualan], [Kd_Barang], [Qty], [Harg"& _ 
                "a_Beli], [Sub_Total]) VALUES (@Kd_Penjualan, @Kd_Barang, @Qty, @Harga_Beli, @Sub"& _ 
                "_Total)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Penjualan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Penjualan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Barang", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Barang", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Harga_Beli", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Harga_Beli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sub_Total", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Sub_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Toko_Buku.My.MySettings.Default.DbTokoBukuConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Kd_Penjualan, Kd_Barang, Qty, Harga_Beli, Sub_Total FROM dbo.T_PENJUALAN_D"& _ 
                "ETAIL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DbTokoBukuDataSet.T_PENJUALAN_DETAILDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DbTokoBukuDataSet.T_PENJUALAN_DETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DbTokoBukuDataSet.T_PENJUALAN_DETAILDataTable = New DbTokoBukuDataSet.T_PENJUALAN_DETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DbTokoBukuDataSet.T_PENJUALAN_DETAILDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DbTokoBukuDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "T_PENJUALAN_DETAIL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Kd_Penjualan As String, ByVal Kd_Barang As String, ByVal Qty As Global.System.Nullable(Of Integer), ByVal Harga_Beli As Global.System.Nullable(Of Decimal), ByVal Sub_Total As Global.System.Nullable(Of Decimal)) As Integer
            If (Kd_Penjualan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Kd_Penjualan,String)
            End If
            If (Kd_Barang Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Kd_Barang,String)
            End If
            If (Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Harga_Beli.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Harga_Beli.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Sub_Total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Sub_Total.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class T_SUPPLIERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "T_SUPPLIER"
            tableMapping.ColumnMappings.Add("Kd_Supplier", "Kd_Supplier")
            tableMapping.ColumnMappings.Add("Nm_Supplier", "Nm_Supplier")
            tableMapping.ColumnMappings.Add("Alamat", "Alamat")
            tableMapping.ColumnMappings.Add("Telp", "Telp")
            tableMapping.ColumnMappings.Add("Email", "Email")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[T_SUPPLIER] WHERE (([Kd_Supplier] = @Original_Kd_Supplier) AND"& _ 
                " ((@IsNull_Nm_Supplier = 1 AND [Nm_Supplier] IS NULL) OR ([Nm_Supplier] = @Origi"& _ 
                "nal_Nm_Supplier)) AND ((@IsNull_Alamat = 1 AND [Alamat] IS NULL) OR ([Alamat] = "& _ 
                "@Original_Alamat)) AND ((@IsNull_Telp = 1 AND [Telp] IS NULL) OR ([Telp] = @Orig"& _ 
                "inal_Telp)) AND ((@IsNull_Email = 1 AND [Email] IS NULL) OR ([Email] = @Original"& _ 
                "_Email)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Supplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nm_Supplier", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Supplier", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nm_Supplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Alamat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Alamat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Alamat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Telp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Telp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Email", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[T_SUPPLIER] ([Kd_Supplier], [Nm_Supplier], [Alamat], [Telp], ["& _ 
                "Email]) VALUES (@Kd_Supplier, @Nm_Supplier, @Alamat, @Telp, @Email);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Kd_"& _ 
                "Supplier, Nm_Supplier, Alamat, Telp, Email FROM T_SUPPLIER WHERE (Kd_Supplier = "& _ 
                "@Kd_Supplier)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Supplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nm_Supplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Alamat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Telp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[T_SUPPLIER] SET [Kd_Supplier] = @Kd_Supplier, [Nm_Supplier] = @Nm_S"& _ 
                "upplier, [Alamat] = @Alamat, [Telp] = @Telp, [Email] = @Email WHERE (([Kd_Suppli"& _ 
                "er] = @Original_Kd_Supplier) AND ((@IsNull_Nm_Supplier = 1 AND [Nm_Supplier] IS "& _ 
                "NULL) OR ([Nm_Supplier] = @Original_Nm_Supplier)) AND ((@IsNull_Alamat = 1 AND ["& _ 
                "Alamat] IS NULL) OR ([Alamat] = @Original_Alamat)) AND ((@IsNull_Telp = 1 AND [T"& _ 
                "elp] IS NULL) OR ([Telp] = @Original_Telp)) AND ((@IsNull_Email = 1 AND [Email] "& _ 
                "IS NULL) OR ([Email] = @Original_Email)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Kd_Supplier, Nm_Supplier, Ala"& _ 
                "mat, Telp, Email FROM T_SUPPLIER WHERE (Kd_Supplier = @Kd_Supplier)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kd_Supplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nm_Supplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Alamat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Telp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kd_Supplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kd_Supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nm_Supplier", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Supplier", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nm_Supplier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nm_Supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Alamat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Alamat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Alamat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Telp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Telp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Email", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Toko_Buku.My.MySettings.Default.DbTokoBukuConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Kd_Supplier, Nm_Supplier, Alamat, Telp, Email FROM dbo.T_SUPPLIER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DbTokoBukuDataSet.T_SUPPLIERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DbTokoBukuDataSet.T_SUPPLIERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DbTokoBukuDataSet.T_SUPPLIERDataTable = New DbTokoBukuDataSet.T_SUPPLIERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DbTokoBukuDataSet.T_SUPPLIERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DbTokoBukuDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "T_SUPPLIER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Kd_Supplier As String, ByVal Original_Nm_Supplier As String, ByVal Original_Alamat As String, ByVal Original_Telp As String, ByVal Original_Email As String) As Integer
            If (Original_Kd_Supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Supplier")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Kd_Supplier,String)
            End If
            If (Original_Nm_Supplier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Nm_Supplier,String)
            End If
            If (Original_Alamat Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Alamat,String)
            End If
            If (Original_Telp Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Telp,String)
            End If
            If (Original_Email Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Kd_Supplier As String, ByVal Nm_Supplier As String, ByVal Alamat As String, ByVal Telp As String, ByVal Email As String) As Integer
            If (Kd_Supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Supplier")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Kd_Supplier,String)
            End If
            If (Nm_Supplier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Nm_Supplier,String)
            End If
            If (Alamat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Alamat,String)
            End If
            If (Telp Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Telp,String)
            End If
            If (Email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Kd_Supplier As String, ByVal Nm_Supplier As String, ByVal Alamat As String, ByVal Telp As String, ByVal Email As String, ByVal Original_Kd_Supplier As String, ByVal Original_Nm_Supplier As String, ByVal Original_Alamat As String, ByVal Original_Telp As String, ByVal Original_Email As String) As Integer
            If (Kd_Supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Kd_Supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Kd_Supplier,String)
            End If
            If (Nm_Supplier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Nm_Supplier,String)
            End If
            If (Alamat Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Alamat,String)
            End If
            If (Telp Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Telp,String)
            End If
            If (Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Email,String)
            End If
            If (Original_Kd_Supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Kd_Supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Kd_Supplier,String)
            End If
            If (Original_Nm_Supplier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Nm_Supplier,String)
            End If
            If (Original_Alamat Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Alamat,String)
            End If
            If (Original_Telp Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Telp,String)
            End If
            If (Original_Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Nm_Supplier As String, ByVal Alamat As String, ByVal Telp As String, ByVal Email As String, ByVal Original_Kd_Supplier As String, ByVal Original_Nm_Supplier As String, ByVal Original_Alamat As String, ByVal Original_Telp As String, ByVal Original_Email As String) As Integer
            Return Me.Update(Original_Kd_Supplier, Nm_Supplier, Alamat, Telp, Email, Original_Kd_Supplier, Original_Nm_Supplier, Original_Alamat, Original_Telp, Original_Email)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _t_BARANGTableAdapter As T_BARANGTableAdapter
        
        Private _t_KATEGORITableAdapter As T_KATEGORITableAdapter
        
        Private _t_PEMBELIANTableAdapter As T_PEMBELIANTableAdapter
        
        Private _t_PEMBELIAN_DETAILTableAdapter As T_PEMBELIAN_DETAILTableAdapter
        
        Private _t_PENJUALANTableAdapter As T_PENJUALANTableAdapter
        
        Private _t_PENJUALAN_DETAILTableAdapter As T_PENJUALAN_DETAILTableAdapter
        
        Private _t_SUPPLIERTableAdapter As T_SUPPLIERTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property T_BARANGTableAdapter() As T_BARANGTableAdapter
            Get
                Return Me._t_BARANGTableAdapter
            End Get
            Set
                Me._t_BARANGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property T_KATEGORITableAdapter() As T_KATEGORITableAdapter
            Get
                Return Me._t_KATEGORITableAdapter
            End Get
            Set
                Me._t_KATEGORITableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property T_PEMBELIANTableAdapter() As T_PEMBELIANTableAdapter
            Get
                Return Me._t_PEMBELIANTableAdapter
            End Get
            Set
                Me._t_PEMBELIANTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property T_PEMBELIAN_DETAILTableAdapter() As T_PEMBELIAN_DETAILTableAdapter
            Get
                Return Me._t_PEMBELIAN_DETAILTableAdapter
            End Get
            Set
                Me._t_PEMBELIAN_DETAILTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property T_PENJUALANTableAdapter() As T_PENJUALANTableAdapter
            Get
                Return Me._t_PENJUALANTableAdapter
            End Get
            Set
                Me._t_PENJUALANTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property T_PENJUALAN_DETAILTableAdapter() As T_PENJUALAN_DETAILTableAdapter
            Get
                Return Me._t_PENJUALAN_DETAILTableAdapter
            End Get
            Set
                Me._t_PENJUALAN_DETAILTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property T_SUPPLIERTableAdapter() As T_SUPPLIERTableAdapter
            Get
                Return Me._t_SUPPLIERTableAdapter
            End Get
            Set
                Me._t_SUPPLIERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._t_BARANGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._t_BARANGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._t_BARANGTableAdapter.Connection
                End If
                If ((Not (Me._t_KATEGORITableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._t_KATEGORITableAdapter.Connection) Is Nothing)) Then
                    Return Me._t_KATEGORITableAdapter.Connection
                End If
                If ((Not (Me._t_PEMBELIANTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._t_PEMBELIANTableAdapter.Connection) Is Nothing)) Then
                    Return Me._t_PEMBELIANTableAdapter.Connection
                End If
                If ((Not (Me._t_PEMBELIAN_DETAILTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._t_PEMBELIAN_DETAILTableAdapter.Connection) Is Nothing)) Then
                    Return Me._t_PEMBELIAN_DETAILTableAdapter.Connection
                End If
                If ((Not (Me._t_PENJUALANTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._t_PENJUALANTableAdapter.Connection) Is Nothing)) Then
                    Return Me._t_PENJUALANTableAdapter.Connection
                End If
                If ((Not (Me._t_PENJUALAN_DETAILTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._t_PENJUALAN_DETAILTableAdapter.Connection) Is Nothing)) Then
                    Return Me._t_PENJUALAN_DETAILTableAdapter.Connection
                End If
                If ((Not (Me._t_SUPPLIERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._t_SUPPLIERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._t_SUPPLIERTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._t_BARANGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._t_KATEGORITableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._t_PEMBELIANTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._t_PEMBELIAN_DETAILTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._t_PENJUALANTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._t_PENJUALAN_DETAILTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._t_SUPPLIERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DbTokoBukuDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._t_KATEGORITableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.T_KATEGORI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._t_KATEGORITableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._t_SUPPLIERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.T_SUPPLIER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._t_SUPPLIERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._t_PENJUALANTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.T_PENJUALAN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._t_PENJUALANTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._t_BARANGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.T_BARANG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._t_BARANGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._t_PEMBELIANTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.T_PEMBELIAN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._t_PEMBELIANTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._t_PEMBELIAN_DETAILTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.T_PEMBELIAN_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._t_PEMBELIAN_DETAILTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._t_PENJUALAN_DETAILTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.T_PENJUALAN_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._t_PENJUALAN_DETAILTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DbTokoBukuDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._t_KATEGORITableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.T_KATEGORI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._t_KATEGORITableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._t_SUPPLIERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.T_SUPPLIER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._t_SUPPLIERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._t_PENJUALANTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.T_PENJUALAN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._t_PENJUALANTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._t_BARANGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.T_BARANG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._t_BARANGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._t_PEMBELIANTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.T_PEMBELIAN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._t_PEMBELIANTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._t_PEMBELIAN_DETAILTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.T_PEMBELIAN_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._t_PEMBELIAN_DETAILTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._t_PENJUALAN_DETAILTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.T_PENJUALAN_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._t_PENJUALAN_DETAILTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DbTokoBukuDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._t_PENJUALAN_DETAILTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.T_PENJUALAN_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._t_PENJUALAN_DETAILTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._t_PEMBELIAN_DETAILTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.T_PEMBELIAN_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._t_PEMBELIAN_DETAILTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._t_PEMBELIANTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.T_PEMBELIAN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._t_PEMBELIANTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._t_BARANGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.T_BARANG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._t_BARANGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._t_PENJUALANTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.T_PENJUALAN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._t_PENJUALANTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._t_SUPPLIERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.T_SUPPLIER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._t_SUPPLIERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._t_KATEGORITableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.T_KATEGORI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._t_KATEGORITableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DbTokoBukuDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._t_BARANGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._t_BARANGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._t_KATEGORITableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._t_KATEGORITableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._t_PEMBELIANTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._t_PEMBELIANTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._t_PEMBELIAN_DETAILTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._t_PEMBELIAN_DETAILTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._t_PENJUALANTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._t_PENJUALANTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._t_PENJUALAN_DETAILTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._t_PENJUALAN_DETAILTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._t_SUPPLIERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._t_SUPPLIERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._t_BARANGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._t_BARANGTableAdapter, Me._t_BARANGTableAdapter.Connection)
                    Me._t_BARANGTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._t_BARANGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._t_BARANGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._t_BARANGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._t_BARANGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._t_KATEGORITableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._t_KATEGORITableAdapter, Me._t_KATEGORITableAdapter.Connection)
                    Me._t_KATEGORITableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._t_KATEGORITableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._t_KATEGORITableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._t_KATEGORITableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._t_KATEGORITableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._t_PEMBELIANTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._t_PEMBELIANTableAdapter, Me._t_PEMBELIANTableAdapter.Connection)
                    Me._t_PEMBELIANTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._t_PEMBELIANTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._t_PEMBELIANTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._t_PEMBELIANTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._t_PEMBELIANTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._t_PEMBELIAN_DETAILTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._t_PEMBELIAN_DETAILTableAdapter, Me._t_PEMBELIAN_DETAILTableAdapter.Connection)
                    Me._t_PEMBELIAN_DETAILTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._t_PEMBELIAN_DETAILTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._t_PEMBELIAN_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._t_PEMBELIAN_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._t_PEMBELIAN_DETAILTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._t_PENJUALANTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._t_PENJUALANTableAdapter, Me._t_PENJUALANTableAdapter.Connection)
                    Me._t_PENJUALANTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._t_PENJUALANTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._t_PENJUALANTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._t_PENJUALANTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._t_PENJUALANTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._t_PENJUALAN_DETAILTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._t_PENJUALAN_DETAILTableAdapter, Me._t_PENJUALAN_DETAILTableAdapter.Connection)
                    Me._t_PENJUALAN_DETAILTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._t_PENJUALAN_DETAILTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._t_PENJUALAN_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._t_PENJUALAN_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._t_PENJUALAN_DETAILTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._t_SUPPLIERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._t_SUPPLIERTableAdapter, Me._t_SUPPLIERTableAdapter.Connection)
                    Me._t_SUPPLIERTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._t_SUPPLIERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._t_SUPPLIERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._t_SUPPLIERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._t_SUPPLIERTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._t_BARANGTableAdapter) Is Nothing) Then
                    Me._t_BARANGTableAdapter.Connection = CType(revertConnections(Me._t_BARANGTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._t_BARANGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._t_KATEGORITableAdapter) Is Nothing) Then
                    Me._t_KATEGORITableAdapter.Connection = CType(revertConnections(Me._t_KATEGORITableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._t_KATEGORITableAdapter.Transaction = Nothing
                End If
                If (Not (Me._t_PEMBELIANTableAdapter) Is Nothing) Then
                    Me._t_PEMBELIANTableAdapter.Connection = CType(revertConnections(Me._t_PEMBELIANTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._t_PEMBELIANTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._t_PEMBELIAN_DETAILTableAdapter) Is Nothing) Then
                    Me._t_PEMBELIAN_DETAILTableAdapter.Connection = CType(revertConnections(Me._t_PEMBELIAN_DETAILTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._t_PEMBELIAN_DETAILTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._t_PENJUALANTableAdapter) Is Nothing) Then
                    Me._t_PENJUALANTableAdapter.Connection = CType(revertConnections(Me._t_PENJUALANTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._t_PENJUALANTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._t_PENJUALAN_DETAILTableAdapter) Is Nothing) Then
                    Me._t_PENJUALAN_DETAILTableAdapter.Connection = CType(revertConnections(Me._t_PENJUALAN_DETAILTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._t_PENJUALAN_DETAILTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._t_SUPPLIERTableAdapter) Is Nothing) Then
                    Me._t_SUPPLIERTableAdapter.Connection = CType(revertConnections(Me._t_SUPPLIERTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._t_SUPPLIERTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
